emptyhead relat engin graph process christoph aberg stanford univers caberg susan stanford univers sctu kunl olukotun stanford univers kunl christoph stanford univers chrismr abstract type high perform graph process engin low high level engin low level engin loi powergraph snap provid optim data structur comput model requir user write low level imper code ensur effici burden user high level engin user write queri lan guag datalog socialit sql grail high level engin easier order magnitud slower low level graph engin emptyhead high level engin support rich datalog queri languag achiev perform compar low level engin core design class join algorithm satisfi strong theoret guarante achiev perform parabl special graph process engin achiev high perform emptyhead introduc join engin architectur includ novel queri optim data layout leverag singl instruct multipl data simd parallel architectur empti head outperform high level approach three order magnitud graph pattern queri pagerank singl sourc shortest path powergraph galoi comparison memori engin dataset livejourn queri pagerank run exampl paper dataset ram memori amount small util usag memori count triangl runtim account time prune graph skew pend snap runtim time includ snap cgt logicblox socialit powergraph system graph prune cost reflect tabl runtim note set intersect scalar custom neighborhood intersect algorithm sort merg simpl fli neighborhood prune snap code nativ effici queri code java run layout csr cgt set memori share infrastructur parallel model program overhead addit incur powergraph node sort vector neighborhood repres larger degre hash cuckoo set hash neighborhood repres powergraph discuss count triangl extend appendix layout combin set choic good rare layout pshort data real layout pshort gain perform moder data synthet experi step code slower queri count triangl perform typic type bitpack variant data real perform best achiev layout pack bit variant unsurpris rang fix set input densiti chang algorithm uint perform highest compar 