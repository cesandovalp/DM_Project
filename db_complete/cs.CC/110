polynomi kernel weight problem michael etscheid stefan kratsch matthia mnich heiko glin universita bonn institut informatik bonn germani etscheid kratsch mmnich roeglin uni abstract kernel formal preprocess hard problem framework parameter complex open problem kernel ask time determinist polynomi kernel subset sum knapsack parameter number item answer question algorithm compress number frank tardo combinatorica result marx icalp context kernel illustr applic polynomi kernel weight version well studi parameter problem parameter item size polynomi kernel subset sum exponenti kernel knapsack final kernel polynomi integ program introduct question handl numer valu fundament comput scienc typic issu precis numer stabil represent number work studi presenc larg number weight version well studi hard problem interest larg number comput complex solv hard combinatori problem concret focus weight preprocess properti problem studi question notion kernel parameter complex rough kernel studi problem paramet instanc hard problem effici reduc equival instanc small size term paramet intuit appli set correct simplif rule addit proven size bound instanc rule appli issu handl larg weight kernel brought open problem kernel exampl well task find vertex cover vertic unweight graph effici comput equival instanc vertic vertic addit equip posit ration weight chosen vertex cover obey maximum weight long unknown encod shrink vertex weight bitsiz polynomi direct chebl chebl equival graph total vertex weight polynomi time denot minimum weight vertex cover size bound addit assumpt vertex weight bound consequ method yield kernel extra requir vertex weight bound contrast assumpt attempt clarifi issu task find polynomi kernel weight problem part deriv reduct rule work support emmi noether program german foundat dfg erc start grant beyondworstcas correct presenc weight goal unweight problem reduc number relev object vertic edg set polynomi paramet shrink replac weight remain object encod size worst polynomi paramet benefit exist literatur kernel unweight problem progress pure weight reduct question consid subset sum problem number target determin subset number sum exact clear reduc instanc size polynomi hing abil handl larg number recal straightforward dynam program solv subset sum timeo impli larg weight expect hard instanc harnik naor number modulo larg random prime magnitud produc equival instanc error probabl exponenti small note instanc respect arithmet modulo total bitsiz eleg approach fail complic problem subset sum consid subset rang sum variant subset sum singl target lower bound upper bound task find subset sum interv observ valu modulo larg random prime face problem target remaind modulo solut nederlof circumv issu creat fact polynomi number small instanc intuit solut close random approach will work well make separ instanc target valu close solut harm lose precis divid number argument iter number iter bound logarithm number encod size creat number instanc polynomi input size instanc size initi input creat instanc knowledg mention posit aim direct issu handl larg number context kernel apart cours chosen paramet bound varieti feasibl weight valu appli integ domain easi find kernel weight vertex cover weight posit integ paramet maximum total weight negat side coupl lower bound rule polynomi kernel weight ilp problem note lower bound appear abus larg weight order build gadget lower bound proof includ super polynomi number object oppos object weight super polynomi encod size lower bound pertain step find reduct rule work correct presenc weight inher complex number question determinist polynomi kernel subset sum knapsack respect number item open problem kernel marx polynomi kernel weight connect augment problem crucial step techniqu frank tardo orig inal aim obtain polynomi time algorithm replac ration weight small equival integ weight observ point tool handl general question kernel weight version parameter problem turn frank tardo result call disjunct ture kernel settl mention open problem knapsack subset sum point circular statement frank tardo set improv exist algorithm ilp general weight problem work theorem frank tardo formal settl open problem determinist kernel subset sum knapsack sect general spirit marx observ allow polynomi kernel izat reduc number object vertic edg polynomi paramet theorem shrink weight object total size polynomi paramet motiv consid weight version well studi parameter prob lem hit set set pack andmax cut reduc number relev structur polynomi paramet applic frank tardo sult impli polynomi kernel small kernel weight problem sect consid knapsack problem special case subset sum sect subset sum instanc item size deriv kernel size polynomi improv exponenti size kernel problem fellow extend work fellow direct show general knapsack problem fix paramet tractabl exponenti kernel parameter number item size unbound number item valu hand provid quadrat kernel size lower bound general subset sum instanc assum exponenti time hypothesi final tool futur kernel weight reduct approach carri polynomi ilp long maximum degre domain variabl small sect preliminari parameter problem languag finit alphabet second compon instanc call paramet problem fix paramet tractabl admit fix paramet algorithm decid instanc time comput function class fix paramet tractabl problem denot fpt evid problem fix paramet tractabl hard hard fpt prove hard parameter reduct hard problem map instanc paramet instanc paramet comput function comput time comput function instanc polynomi reduct call polynomi paramet transform problem complet paramet constant para complet kernel parameter problem effici algorithm instanc return instanc comput function function call size kernel polynomi kernel polynomi bound parameter problem fix paramet tractabl decid kernel kernel impli fact superpolynomi size size match time hard problem exponenti typic paramet upper bound instanc size hand assum fpt hard problem kernel tool rule polynomi kernel parameter problem appropri complex assumpt conp poli lower bound transfer mention polynomi paramet transform settl open problem frank tardo theorem frank tardo theorem frank tardo describ algorithm prove theorem theorem algorithm vector integ polynomi time find vector sign w·b sign w·b vector theorem allow compress linear inequ encod length polyno mial number variabl frank tardo algorithm run polynomi time consequ kernel present work polynomi run time exampl algorithm vector ration polynomi time find vector integ total encod length vector proof theorem vector vector note inequ fals sign sign sign equal hold encod logn bit vector encod length polynomi kernel knapsack easi applic theorem kernel knapsack number item paramet knapsack input integ ration weight vector profit vector paramet question vector theorem knapsack admit kernel size consequ subset sum admit kernel size small kernel weight parameter problem result frank tardo impli easili handl larg weight number kernel provid number object small polynomi paramet handl step reduct number object presenc weight coupl standard problem presum reduct size number number valu exponenti hit set set pack outlin polynomi kernel weight hit set weight set pack problem general interest hit cover pack problem extend list problem weight version direct benefit problem formal defin weight hit set input set famili function paramet question set cardin weight intersect set weight set pack input set famili function paramet question famili exact disjoint set weight note treat constant point definit weight set pack restrict attent exact disjoint set weight relax set problem hard hand kernel weight set pack hold requir cardin total weight kernel reli sunflow lemma erdo rado unweight counterpart recal lemma lemma erdo rado famili set size find time call sunflow consist set pairwis intersect set call core weight hit set appli sunflow lemma direct unweight case size exceed find sunflow core hit set cardin element true sunflow safe delet set hit set enforc remain sunflow iter reduct rule yield equival appli theorem safe restrict element set set famili theorem appli weight target weight replac weight magnitud bound bit size note preserv sum weight target weight preserv sign wik total bitsiz domin space encod weight element set theorem weight hit set admit kernel set total size bound weight set pack argument work theorem weight set pack admit kernel set total size bound proof size exceed find sunflow core argu safe discard set weight fail solut includ disjoint set total weight notic set set apart empti intersect set disjoint apart total element select disjoint set lightest set total weight iter rule suffic preserv sum weight compar bound bit element case max cut deriv polynomi kernel weight max cut defin weight max cut input graph function paramet question set note chose weight cut paramet natur problem number edg solut meaning paramet restrict cut edg problem hard requir edg exampl integr weight multipli edg weight add arbitrari edg weight input graph set weight bound chang instanc semant feasibl solut left edg restrict edg weight problem intract allow arbitrari posit ration weight transform instanc complet unweight max cut problem weight equal paramet number edg cut instanc weight max cut problem graph edg weight equal paramet theorem weight max cut admit kernel size proof total weight edg greedi algorithm yield cut weight instanc reduc constant size posit instanc edg input graph edg weight theorem equival integr instanc encod length polynomi kernel bin pack addit error bin pack classic hard problem involv number posit integ number item bin size integ question integ number partit set bin sum parameter perspect problem high intract natur paramet general weak hard partit problem jansen prove parameter complex improv drastic insist exact solut algorithm provid pack bin correct state bin suffic concret problem variant fix paramet tractabl respect crucial relax small item greedili top feasibl pack big item bin instanc trivial pack bin exceed total weight revisit idea threshold small item note check total weight report pack safe discard small item proceed crucial turn instanc creat pack lift item contradict assum instanc applic theorem yield polynomi kernel larg item addit bin pack input item size bin size paramet task pack bin size correct state bin suffic theorem addit bin pack admit polynomi kernel item bit size proof instanc item size exceed total weight item exceed safe answer pack bin case kernel will return instanc answer will correct origin instanc report pack origin instanc pack report pack hold origin instanc assum item sort decreas consid subsequ item size instanc restrict item permit pack bin item pack input instanc assum greedi pack small item exist pack fail impli item size fit bin remain space total pack weight exclud contradict fact kernel total weight pack impli pack set clear item permit pack bin true set item observ larg total weight return direct item weight applic weight reduct tool yield total size kernel bound knapsack problem provid lower upper bound kernel size variant knapsack problem exponenti kernel knapsack item size consid subset sum problem restrict instanc distinct item weight restrict negat integ problem solv fix paramet algorithm paramet reduct integ linear program fix dimens appli algorithm improv observ fellow general fellow knapsack item weight precis instanc knapsack problem consist item distinct item weight number item valu unbound number number bound function paramet make fellow inapplic theorem knapsack problem distinct weight solv time poli denot encod length instanc proof observ pack item weight optim pack item largest item weight assum item weight label increas valu defin denot item formul knapsack problem program variabl encod item weight pack knapsack encod total max function general linear concav impli lemma lemma exist set linear function proof defin uniqu linear function function concav definit linear function impli conclud program replac constraint set constraint formul knapsack problem integ linear program variabl encod length integ linear program polynomi bound encod length instanc knapsack algorithm kannan impli fix paramet tractabl knapsack item weight improv version algorithm frank tardo theorem polynomi kernel subset sum item size improv work fellow direct subset sum problem admit polynomi kernel paramet number item size improv exponenti size kernel fellow kernel bound consid instanc subset sum item distinct item size item size multipl number item size formul ilp task decid subset item weight exact ilp simpli model item size number item select satisfi subset sum constraint skxk integ linear program instanc relev constraint variabl maximum rang bound maxi consid case log log appli theorem reduc instanc equival instanc size log log log reformul equival subset sum instanc replac size log weight largest integ log log item weight encod length log log log encod length log log solv integ linear program improv version algorithm frank tardo run time integ linear program dimens encod size dimens encod size condit solv ilp decid instanc time summari theorem subset sum item size admit kernel size admit kernel size log multipl item weight encod binari remark method work instanc succinct encod distinct item weight binari item size multipl binari run time frank tardo algorithm exponenti input length subset sum instanc log kernel lower bound subset sum kernel lower bound subset sum assum exponenti time hypothesi exponenti time hypothesi state exist time algorithm sat denot number variabl lemma subset sum admit time algorithm assum exponenti time hypothesi denot number number proof proof base polynomi time reduct gurari transform sat formula variabl claus equival instanc subset sum exact number claus intermedi step reduct consid system linear equat interpret variabl introduc addit variabl easili check system linear equat solut formula satisfi relabel variabl yield reformul rewrit system equat singl equat integ decim represent denot integ decim represent equat equival system sum ensur carryov occur digit sum equal sum satisfi satisfi result sat formula satisfi tupl instanc subset sum assum algorithm subset sum run time denot number number reduct algorithm decid satisfi time sparsif lemma impagliazzo contradict exponenti time hypothesi theorem subset sum admit kernel size assum exponenti time hypothesi denot number number proof assum exist kernel algorithm subset sum produc instanc size util solv subset sum time contradict exponenti time hypothesi lemma arbitrari subset sum instanc item appli kernel algo rithm equival instanc encod size number target divid number group number call heavi light bit encod heavi number number heavi number bound solv instanc subset heavi number determin exist subset light number dynam program ming heavi number subset dynam program algorithm run time light number bound instanc solv time equat integ polynomi program bound rang frank tardo result linear inequ binari variabl turn general case polynomi inequ integr bound variabl integ polynomi program instanc compress variabl bound special case integ linear program admit polynomi kernel number variabl variabl bound transfer languag theorem arbitrari polynomi lemma polynomi degre coef ficient effici comput polynomi encod length log log sign sign proof pairwis distinct monomi coeffici appli theorem set encod length upper bound logn log monomi degre monomi coeffici belong encod log log bit encod length upper bound log log prove correct construct set set theorem sign sign sign sign complet proof lemma lemma compress integ polynomi program instanc integ polynomi program input polynomi degre encod coeffici monomi ration question vector theorem integ polynomi program instanc consist monomi effici compress equival instanc encod length bound log log proof defin appli lemma split function part claim instanc equival vector satisfi satisfi analog sign sign sign sign equal lemma remain upper bound encod length tupl encod log log bit variabl encod log log bit total yield desir upper bound kernel size theorem extend earlier result granot skorin karpov consid restrict variant bound theorem yield polynomi kernel combin paramet constant dimens theorem polynomi kernel integ linear program combin paramet sharp contrast result kratsch integ linear program ming admit polynomi kernel combin paramet polynomi hierarchi collaps third level conclus paper polynomi kernel knapsack problem parameter number item provid polynomi kernel weight version number fundament combinatori optim problem well integ polynomi program bound rang small kernel built semin result frank tardo compress larg integ weight smaller natur direct pursu improv compress qualiti provid frank tardo algorithm weight problem consid polynomi kernel size general larger degre best kernel size unweight coun terpart problem interest increas kernel size compar unweight problem space object space encod weight kernel size unweight problem match refer han bodlaend rodney downey michael fellow danni hermelin problem polynomi kernel comput system sci han bodlaend fedor fomin saket saurabh open problem pose worker http local file open problem open han bodlaend bart jansen stefan kratsch kernel lower bound cross composit siam discret math han bodlaend ste phan thomass ander yeo kernel bound disjoint cycl disjoint path theoret comput sci miroslav chleb janka chleb crown reduct minimum weight vertex cover problem discret appl math marek cygan fedor fomin bart jansen lukasz kowalik daniel lokshtanov niel marx marcin pilipczuk micha lpilipczuk saket saurabh open problem fpt school http marek cygan lukasz kowalik marcin pilipczuk open problem workshop kernel http slide worker andrew drucker limit classic quantum instanc compress proc foc oct paul erdo richard rado intersect theorem system set london math soc michael fellow serg gasper franc rosamond parameter number number theori comput system michael fellow jiong guo niel marx saket saurabh data reduct problem kernel dagstuhl seminar dagstuhl report andra frank tardo applic simultan diophantin approxim combinatori optim combinatorica frieda granot jadranka skorin kapov simultan approxim quadrat integ program ming oper res lett eitan gurari introduct theori comput comput scienc press danni harnik moni naor compress instanc cryptograph applic siam comput russel impagliazzo ramamohan paturi franci zane problem exponenti complex comput system sci klaus jansen stefan kratsch niel marx ildiko schlotter bin pack number bin revisit comput syst sci ravi kannan convex bodi theorem integ program math oper res stefan kratsch polynomi kernel integ linear program cover pack feasibl proc esa volum lectur note comput sci lenstra integ program number variabl math oper res niel marx szlo fix paramet algorithm minimum cost edg connect augmen tation proc icalp volum lectur note comput sci jesper nederlof erik jan leeuwen ruben zwaan reduc target interv exact queri proc mfcs volum lectur note comput sci 