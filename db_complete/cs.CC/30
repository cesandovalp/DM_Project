current cliqu algorithm optim parser amir abboud stanford univers abboud artur backur mit backur virginia vassilevska william stanford univers virgi abstract cfg recognit problem context free grammar string length decid basic pars question core comput scienc problem parser solv problem time matrix multipl expon dozen pars algorithm propos year upper bound remain unbeaten best combinatori algorithm mild subcub complex lee jacm provid evid fast matrix multipl need cfg pars effici practic algorithm hard imposs lee algorithm general pars problem run time convert surpris subcub algorithm boolean matrix multipl hard result requir grammar size relev case constant size grammar work prove improv algorithm constant size grammar term runtim avoid ineffici fast matrix multipli cation impli breakthrough algorithm cliqu problem graph node decid form cliqu classifi complex fundament problem reduct led lower bound modern well studi cubic time problem faster algorithm high desir practic rna fold central problem comput biolog dyck languag edit distanc answer open question saha foc introduct context free grammar cfg languag cfl introduc chomski play fundament role comput theori formal languag theori program languag natur languag process comput scienc general applic divers area comput biolog databas essenti sweet spot express languag natur languag comput pars well restrict languag regular languag dfa pars paper will concern basic definit cfg chomski normal form set termin alphabet consist set nontermin includ start symbol set product deriv rule form cfg defin cfl string start recurs appli arbitrari deriv rule grammar cfg recognit problem cfg string determin problem fundament practic interest restrict fix size length string arbitrari main question will address work time complex cfg recognit problem clear theoret question practic motiv overwhelm ing cfg recognit close pars problem output deriv sequenc string grammar pars essenti comput understand program script algorithm algorithm pars solv recognit problem well ruzzo cfg recognit hard pars logarithm factor make problem rough equival surpris critic natur cfg recognit led develop long list clever algorithm includ classic work search practic pars algorithm work well vari applic exampl canon cyk algorithm construct dynam program tabl size cell list nontermin produc substr posit posit tabl comput linear time entri enumer deriv rule check add upper bound problem famous algorithm proceed top dynam program approach perform faster grammar properti variant algorithm mild subcub time big theoret breakthrough achiev valiant design sophisti cate recurs algorithm util fast boolean matrix multipl speed comput dynam program tabl cyk algorithm time plexiti cfg problem decreas matrix multipl typic distinguish subcub runtim constant mild subcub subcub runtim expon size grammar applic runtim cite rytter describ algorithm interest algorithm formal languag hard argu quot today year result follow work propos simplif algorithm general stochast cfg pars appli problem despit vast academ impact algorithm enjoy success practic theoret fastest matrix multipl algorithm current practic algorithm outperform combinatori method practic practic subcub fast matrix multipl algorithm theoret ical fastest combinatori algorithm boolean matrix multipl bmm time combinatori algorithm bmm cfg recognit subcub run time absenc effici algorithm lack techniqu prove superlinear uncon dition lower bound natur problem research turn condit lower bound cfg recognit pars late harrison havel observ algorithm problem impli algorithm verifi boolean matrix multipli cation matric reduct combinatori recognit algorithm impli breakthrough subcub algorithm bmm ruzzo pars algorithm prefix input string languag comput bmm matric consid combinatori algorithm lower bound left larg gap compar cubic upper bound big step tight lower bound work satta pars tree adjoin grammar adapt lee prove famous condit lower bound cfg pars lee prove bmm matric reduc pars string length respect cfg size parser requir nontermin substr deriv valid deriv grammar reduct prove parser combinatori time impli breakthrough bmm algorithm result suffer limit point research describ despit limit progress result observ saha replac bmm proof apsp augment product rule probabl show apsp base lower bound stochast cfg pars saha construct lower bound suffer exact limit major limit lower bound irrelev size grammar larger string cubic cfg descript grow input string defin cfl lee point case unrealist applic program languag instanc grammar size smaller program interest fact grammar hardcod parser pars algorithm run time rule result appeal run time second limit lower bound demand requir ment parser provid extra return pars tree lower bound hold recogn parser minim meaning output theoret arguabl fundament time complex cfg recognit pars algorithm combinatori result meaning answer question upper bound bmm reduct parser run linear time result rule time parser fast matrix multipl parser amaz result observ answer question understand complex cfg recognit find problem bmm reduc despit appar similar complex problem expect cubic combinatori algorithm unrestrict big gap complex input size grammar fix reduct encod grammar letter string bit instanc bmm requir bit respect reduct produc singl instanc cfg recognit expect bmm impli higher lower bound pars fix size grammar main result paper tight reduct cliqu problem recog nition fix cfg prove lower bound cfg recognit overcom limit lower bound breakthrough cliqu algorithm exist lower bound complet match year upper bound unrestrict gorithm complet match cyk combinatori algorithm resolv complex cfg recognit fix size grammar formal state background cliqu fundament graph problem ask undirect unweight graph node edg con tain cliqu node parameter version famous hard max cliqu equival max independ set cliqu well studi prob lem theoret comput scienc canon intract complet problem parameter complex naiv algorithm solv cliqu time reduct bmm matric size solv fast matrix multipl time divis idea need better algorithm research wonder improv case bmm obtain faster trivial combinatori algorithm polylogarithm factor cliqu longstand open question fastest combinatori algorithm run logk time smallest number cliqu solv combinatori nck time nfk time algorithm larg constant conjectur graph algorithm parameter complex algorithm refut conjectur impli faster exact algorithm max cut note linear time algorithm bmm prove well result chen ccf exponenti time hypothesi plausibl conjectur parameter complex subset sum impli negat intuit support conjectur vassilevska william prove subcub combinatori algorithm cliqu impli algorithm bmm well uncondit lower bound cliqu comput model monoton circuit plant cliqu problem proven challeng aak max cliqu hard effici approxim nontrivi factor formal reduct cliqu cfg recognit prove theorem theorem context free grammar constant size determin string length time cliqu node graph solv time reduct combinatori tight reduct denot smallest number cfg recognit solv time combinatori time corollari theorem plausibl assumpt current cliqu algorithm optim improv theorem impli combin algorithm standard cfg parser grammar size fix rule time combinatori cfg parser comput function construct singl fix context free grammar recognit problem pars problem solv faster algo rithm combinatori recogn will subcub time impli breakthrough algorithm cliqu problem condit prove algorithm optim general purpos cfg parser effici parser will work cfl special restrict properti posit side reduct hint cfg allow effici pars onlin version cfg recognit preprocess cfg string reveal letter time stage deriv grammar letter minim total time take provid answer problem long histori algorithm lower bound current best upper bound total run time best lower bound log harder problem lower bound cfg recognit hold main ingredi proof theorem lossless encod graph string belong simpl cfl iff graph cliqu classifi complex fundament problem construct led lower bound modern well studi cubic time problem faster algorithm high desir practic rna fold rna fold problem version maximum match relev problem comput biolog basic version neat defin set letter set match letter letter pair match sequenc letter rna fold problem ask maximum number cross pair ith jth letter sequenc match problem view stochast cfg pars problem cfg strict intuit led mild subcub algorithm problem main idea adapt algorithm replac bmm min matrix product comput distanc tropic prod uct fastest algorithm min matrix multipl solv rna fold logn time fastest combinatori algorithm rough time subcub algorithm impli breakthrough cliqu algorithm result negat partial answer open question rais andoni theorem rna fold sequenc length solv time cliqu node graph solv time reduct combinatori tight lower bound combinatori algorithm result faster algorithm rna fold upper bound problem leav small gap complex problem work observ reduct rna fold min matrix multipl produc matric special bound monoton structur entri bound row column monoton increas exact structur allow chan lewenstein solv bound monoton min convolut problem subquadrat time algorithm interest tool addit combinator plausibl approach will lead subcub combinatori algorithm bound monoton min product rna fold dyck edit distanc lower bound theorem impli lower bound languag edit distanc problem cfls return minim edit distanc string string languag languag length shortest sequenc insert delet substitut need convert string languag classic problem introduc aho peterson earli cubic time algorithm divers applic gcs rajasekaran nicola saha subcub time approxim algorithm problem arbitrari cfgs applic cfg work restrict easi pars linear time simplest cfgs big practic dyck grammar produc string well balanc parenthesi dyck recognit problem easili solv linear time singl pass input despit special structur dyck edit distanc problem subcub algorithm breakthrough saha present linear time algorithm achiev logarithm approxim problem dyck edit distanc view general classic string edit distanc problem complex essenti quadrat approxim algorithm match best approxim algorithm string edit distanc andoni krauthgam onak term run time approxim factor natur lead wonder complex exact dyck edit distanc quadrat prove faster cliqu find algorithm theorem dyck edit distanc sequenc length solv time cliqu node graph solv time reduct combinatori result answer open question saha ask lower bound hold dyck edit distanc problem search good approxim algorithm problem justifi effici exact algorithm remark simpl observ longest common subsequ lcs problem sequenc length alphabet reduc rna fold sequenc length rna lcs quadrat lower bound lcs strong exponenti time hypothesi seth impli lower bound rna fold well idea work cfg recognit dyck edit distanc interest higher lower bound match algorithm base lower bound seth impli faster matrix multipl algorithm refut seth high unexpect breakthrough base hard cliqu devis delic construct cubic time natur problem proof outlin three proof main approach will preprocess graph time order construct encod string length will enumer cliqu repres care design gadget tripl cliqu gadget will match well tripl cliqu edg exist will fast subcub cfg recogn rna folder dyck edit distanc algorithm speed search good tripl solv cliqu faster cliqu gadget will construct way proof main differ will combin cliqu sequenc challeng will find combin gadget string good tripl will affect score pars abil string notat preliminari graph paper will node undirect unweight edg associ node integ denot encod binari will assum length exact log node graph clear context will denot set cliqu will denot concaten sequenc revers sequenc problem definit addit problem specif preliminari will correspond cliqu cfg recognit reduct cliqu cfg recognit prove theorem graph will construct string length encod string will construct time linear length will defin context free grammar will independ will constant size string will languag defin cliqu will prove theorem astart amid aend bstart bmid bend cstart cmid cend set termin alphabet usual will denot empti string will denot deriv rule context free grammar deriv appli multipl rule string will defin node list gadget consid defin cliqu node cliqu list gadget cng clg tlg main cliqu gadget will astart cng amid cng aend bstart clg bmid cng bend cstart clg cmid clg cend final encod graph sequenc cliqu detect context free grammar set termin grammar main rule astart cend amid cmid aend bstart bend cstart will rule grammar rule will refer list rule sxi sxi nxi nxi sxi nxi nxi add assist rule cliqu detect grammar termin termin deriv rule size sum length deriv rule proof proof essenti deriv cfg start start symbol string termin show string properti encod graph string describ will properti iff graph cliqu correct reduct will follow claim claim cliqu proof deriv appli start rule astart cend astart appear cstart appear prefix suffix cng clg repeat appli list rule final termin rule lemma deriv node cliqu call observ appli deriv amid cmid will cng clg cng clg deriv repeat list rule exit sxi rule lemma node cliqu node cliqu well call observ final will rest deriv aend bstart bend cstart substr substr combin observ deriv scheme lemma conclud node form cliqu complet proof will prove lemma lemma deriv sxi cng clg list rule form cliqu proof sequenc deriv start sxi will form sxi proceed termin nxi termin produc termin singl instanti sxi produc second list rule singl instanti nxi turn nxi proceed termin sxi singl instanti nxi produc singl instanti sxi produc termin left set arriv sxi repeat arbitrari number time appli rule sxi deriv sxi string form goal prove satisfi properti easi check deriv string form produc list length binari sequenc length surround symbol neighbor binari sequenc key observ repeat applic fourth list rule deriv nxi nxi combin observ start sxi deriv string form termin rule sxi sxi nxi nxi sxi form consid assumpt statement lemma recal construct cliqu node gadget cliqu list gadget construct cng compos node gadget separ symbol clg compos list gadget separ symbol note list gadget node gadget separ symbol symbol list gadget ith cng ith clg deriv sxi cng clg deriv sxi sxi sxi impli binari encod node appear ith cng appear ngs appear clg correspond node list neighbor node impli note appear equal deriv occur consid pair node construct cng clg ith cng clg clg previous argument edg cliqu pair node neighbor conclud cliqu claim cliqu proof claim deriv proof claim tripl cliqu form cliqu readi prove theorem remind theorem context free grammar constant size determin string length time cliqu node graph solv time reduct combinatori proof instanc cliqu graph construct string describ will length time recogn statement check time treat constant claim iff graph cliqu cliqu rna fold prove theorem reduc cliqu rna fold defin alphabet letter constant size letter will exact match letter will denot set match letter letter will pair letter match iff pair indic cross iff three condit hold iii note definit cross pair share indic definit rna fold sequenc letter maximum number pair pair letter match cross pair will denot maximum rna interest note rna languag distanc problem respect easi pars grammar specif structur grammar reduct appli idea introduc allow replac cliqu detect grammar easier grammar parser return distanc string grammar high level reduct rna fold present simplifi proof will reduc cliqu general weight version rna fold version reduc standard rna fold problem overhead definit weight rna fold sequenc letter weight function maximum weight set pair pair letter match cross pair weight defin will denot maximum wrna lemma instanc weight rna fold sequenc length alphabet weight function reduc instanc rna fold sequenc length alphabet proof set symbol repeat time check wrna rna hold replac match pair fold achiev weight rna score wrna pair unweight rna fold instanc contribut rna will rna wrna suppos thet symbol pair symbol sequenc symbol length sequenc produc singl symbol transform symbol sequenc symbol length assum exist symbol pair symbol exist symbol pair symbol find symbol repeat procedur choos satisfi properti choos number symbol small break tie arbitrarili match symbol counterpart rematch symbol match check rematch symbol number match pair decreas assum optim fold pair match correspond substr complet pair fold achiev wrna rna simpli fold correspond symbol pair reduct graph node unweight undirect edg will describ effici construct sequenc alphabet constant size rna score will depend cliqu length will dnk small fix constant independ time construct will linear length will prove fast subcub rna folder fast cliqu detector run faster time main strategi will enumer cliqu graph search tripl cliqu edg will find tripl iff graph cliqu rna folder will util speed search good tripl reduct will encod cliqu short sequenc length rna fold score sequenc compos encod tripl sequenc will larg iff tripl good will combin short encod long sequenc exist good tripl score optim fold rna sequenc sequenc will compos smaller gadget will combin way pad gadget construct gadget explain properti proof properti postpon construct sequenc sequenc replac letter match letter alphabet will letter addit symbol will add need gadget will set weight extra symbol add will expens exampl will add symbol alphabet set log defin node gadget list neighborhood gadget gadget construct node rna fold score sequenc larg equal fix neighborhood smaller expens symbol forc optim fold match exact will remain unmatch free construct allow fold pick fold score symbol fact achiev maxim score iff formal prove claim log note upper bound total weight symbol gadget node set cliqu consid will combin node list gadget larger gadget will encod cliqu will add symbol alphabet set singl letter expens entir node list gadget will encod cliqu way cng second clg cliqu gadget properti cliqu rna fold score sequenc cng clg larg equal fix form cliqu smaller rna fold score sequenc tell pair node connect idea construct gadget copi gadget correspond node cliqu time gadget order pair node will posit gadget cng gadget clg posit expens separ sure optim rna fold cng clg gadget posit fold gadget symbol will pair formal prove claim log note upper bound total weight symbol cng clg gadget final introduc letter alphabet set weight expens entir gadget construct defin final cliqu gadget will duplic alphabet three time forc meaning fold gadget will conveni three type will three cliqu type pair type will construct alphabet mark letter pair type particip sequenc notat repres sequenc replac letter letter will three type cliqu gadget order forc desir interact cng clg cng clg cng clg cliqu gadget achiev exact three cliqu rna fold score sequenc larg equal cliqu smaller rna folder gadget determin three separ cliqu form cliqu achiev notic highest prioriti optim fold match gxi letter counterpart leav three sequenc fold cng clg clg cng clg cng maxim score three sequenc achiev iff pair cliqu form cliqu iff form cliqu formal prove claim remain challeng combin sequenc correspond cliqu graph sequenc exist good tripl cliqu rna fold score entir sequenc note naiv concaten cliqu gadget sequenc optim sequenc will choos fold cliqu gadget pair tripl fold tripl gadget unabl fold cross will structur rna fold problem implement select gadget forc exact three cliqu gadget fold optim fold remark implement select gadget three proof paper deriv rule fact fold expens separ sequenc left left interv free fold part sequenc reli restrict dyck open bracket match close bracket introduc extrem expens symbol upper bound total weight cgx gadget set cliqu detect rna sequenc defin pad sure gadget imposs fold extrem valuabl pair fold assum pair left note symbol surround cliqu gadget pair side left cross pair gadget particip symbol match mark symbol pair type cliqu gadget match symbol match gadget particip fold argument symmetr left fold sequenc three cliqu gadget achiev maxim score iff cliqu prove main claim weight rna fold score cliqu detect sequenc larg equal fix graph cliqu smaller claim formal proof final alphabet size symbol observ construct time enumer subset node length construct heavi preprocess encod graph work cliqu largest weight construct log lemma reduc comput weight rna instanc unweight rna fold sequenc length log prove theorem formal proof will start proof list node gadget desir function log claim node weight rna fold score wrna proof letter sequenc concern mark will omit subscript appear complet match sequenc score log match symbol symbol gain extra score log case weight rna score log log assum optim fold score note sequenc fewer symbol symbol sequenc symbol pair symbol lose score entir weight symbol match leav unmatch clear optim assum symbol match substr fold substr fold achiev score log total score optim match prove cliqu node gadget cliqu list gadget check cliqu form bigger cliqu claim cliqu weight rna fold score wrna cng clg cliqu proof will omit irrelev subscript note sequenc cng clg number symbol pair singl counterpart lose contribut wrna score gain pair symbol node list gadget rest sequenc assum symbol pair wrna cng clg wrna claim wrna connect maxim iff pair node connect cliqu conclud cliqu readi prove main properti cliqu gadget sequenc three cliqu gadget type achiev maxim score iff form cliqu claim three cliqu weight rna fold score wrna cliqu proof symbol gxi pair coun terpart lose contribut wrna score pair symbol gxi equal wrna wrna cng clg wrna cng clg wrna clg cng claim three summand equal three cliqu pairwis cliqu summand claim notic cliqu iff three cliqu pairwis cliqu readi prove main claim proof select gadget achiev desir properti exact cliqu type fold optim match size number cliqu graph number cliqu gadget will type will set claim weight rna score cliqu proof defin denot number symbol pair cliqu gadget cgx match letter cliqu gadget cgi cliqu gadget sequenc cgx letter particip fold recal definit weight total weight cliqu gadget weight letter recal definit will inequ wrna wrna optim fold wrna wrna cliqu claim summand equal iff graph cliqu fact complet proof readi construct graph prove theorem remind theorem rna fold sequenc length solv time cliqu node graph solv time reduct combinatori proof graph node construct sequenc describ sequenc construct time enumer subset node length largest weight construct log lemma reduc comput weight rna instanc unweight rna fold sequenc length log rna folder statement return weight rna fold score time treat constant claim score determin cliqu step reduct combinatori cliqu dyck edit distanc prove theorem reduc cliqu dyck edit distanc problem defin dyck grammar defin fix size alphabet open bracket close bracket close string belong dyck grammar bracket well form formal dyck grammar defin rule grammar defin dyck context free languag pars linear time dyck edit distanc problem string find minimum edit distanc string dyck cfl find shortest sequenc substitut delet need convert string belong dyck will refer distanc dyck score cost introduc altern way dyck edit distanc problem will proof pair indic cross iff three condit hold note definit cross pair share indic defin align sequenc length set cross pair align letter letter align align pair match open bracket correspond close bracket align pair mismatch mismatch will correspond substitut edit distanc transcript letter appear pair align delet defin cost align number mismatch number delet letter verifi align cost correspond edit distanc transcript string dyck cost vice versa reduct graph node unweight undirect edg will describ effici construct sequenc alphabet constant size dyck score will depend cliqu length will dnk small fix constant independ time construct will linear length will prove fast subcub algorithm dyck edit distanc fast cliqu detector run faster time section main strategi will enumer cliqu graph search tripl cliqu edg will find tripl iff graph cliqu dyck edit distanc algorithm will util speed search good tripl reduct will encod cliqu short sequenc length dyck score sequenc compos encod tripl sequenc will larg iff tripl good will combin short encod long sequenc exist good tripl score optim align sequenc sequenc will compos smaller gadget will bine way pad gadget construct gadget explain properti proof properti postpon construct recal associ node integ denot encod binari will assum length exact log node will fact node encod sequenc sequenc replac letter close bracket alphabet will letter addit symbol will add need gadget will number bound defin node gadget list neighborhood gadget gadget construct node dyck score sequenc small equal fix neighborhood larger prove formal claim argument note upper bound total length symbol gadget node set cliqu consid will combin node list gadget larger gadget will encod cliqu will encod cliqu way cng second clg note upper bound total length symbol cng clg gadget will add symbol alphabet will duplic alphabet three time forc meaning align gadget will conveni three type will three cliqu type pair type will construct alphabet mark letter pair type particip sequenc notat repres sequenc replac letter letter will three type cliqu gadget order forc desir interact cng cng clg cng clg clg cliqu gadget achiev exact three cliqu dyck score sequenc small equal cliqu larger formal prove claim argument complic mismatch main differ proof implement select gadget combin cliqu gadget sequenc exist good tripl cliqu dyck score entir sequenc idea rna proof work benefici mismatch separ add dyck match rna care order will idea cliqu detect sequenc defin symbol rare expens optim align will match counterpart sequenc letter match match adjac symbol expens optim behavior match exact interv argument hold part behavior leav exact cliqu gadget type align freeli tripl construct gadget optim score achiev iff cliqu prove main claim dyck score cliqu detect sequenc small equal fix graph cliqu larger claim formal proof fix construct time enumer subset node length prove theorem final alphabet size symbol formal proof log claim dyck proof will omit subscript matter proof claim binari sequenc align binari sequenc symbol will mismatch delet contribut dyck score will symbol match counterpart will contribut dyck score dyck score assum binari sequenc align exact binari sequenc denot log symbol binari sequenc match counterpart symbol match counterpart contribut unmatch symbol dyck cost equal achiev iff proof clear achiev equal choos element equal achiev equal symbol correspond contribut dyck score symbol contribut dyck cost iff mismatch happen symbol match counterpart remain symbol contribut score correspond contribut dyck score iff proof will definit definit sequenc defin pattern min contigu subsequ dyck claim cliqu cliqu dyck cng clg proof will omit subscript matter proof dyck cng clg pattern clg suppos align gadget symbol gadget will substitut delet cost oper gadget align gadget construct cng clg dyck cng clg pattern dyck equal appear symbol dyck cng clg claim equal equal invoc claim impli bicliqu vertic verifi achiev equal bicliqu claim tripl cliqu union cliqu dyck proof lower bound dyck assum symbol align symbol sequenc will contribut dyck score prove achiev dyck score cliqu denot number symbol sequenc align symbol belong sequenc denot set symbol denot symbol align symbol symbol consid symbol match counterpart contribut dyck score divid symbol mismatch pair definit impli note dyck dyck align symbol symbol mismatch symbol pair revers inequ observ symbol will mismatch note mismatch symbol cost assum symbol interact symbol bound dyck score argu dyck equal iff bicliqu vertic vertic vertic argument dyck function dyck state condit equal consid three gadget cng three gadget clg assum symbol gadget align symbol gxi assum case delet symbol gadget align symbol gxi rematch gxi check rematch symbol gxi cost increas cngxi gadget align cngx clgx substr type gab counterpart cngxi cngx clgx contribut dyck score gadget cngxi align clgxi vice versa assum symbol complet align dyck cost string exact dyck dyck dyck equal iff cliqu claim turn proof claim behavior select gadget fix integ defin depend claim cliqu dyck dyck proof claim will requir claim lemma start lemma general properti dyck edit distanc lemma substr sequenc assum length symbol symbol particip mismatch delet modifi align symbol align symbol proof denot number symbol align symbol denot set symbol align case consid dyck cost induc symbol properti statement lemma modif align align symbol pair induc cost align symbol induc cost total induc cost modif satisfi requir lemma odd dyck cost induc symbol modif align align symbol pair symbol delet rememb odd induc cost align symbol induc cost total induc cost modif satisfi requir lemma consid optim align string lemma maxim substr consist entir symbol symbol appear maxim substr consist entir symbol match maxim substr increas dyck score modifi align symbol match form substr substr suffix prefix choos suffix prefix assum rest symbol delet mismatch proof wlog will substr suffix write symbol symbol align symbol symbol symbol align symbol modifi align length consid symbol align symbol delet symbol symbol align increas dyck cost delet symbol symbol align odd length lemma assum symbol mismatch symbol symbol state symbol mismatch match symbol rematch symbol symbol suffix increas dyck score delet prove claim properti optim align claim essenti bad behaviour align exact cliqu gadget type suboptim depend claim gadget sequenc symbol match counterpart symbol match counterpart case gadget contribut dyck score analog claim hold proof lemma assum symbol mismatch symbol substr gadget symbol match symbol construct symbol match counterpart lemma mismatch decreas dyck score delet symbol symbol align gadget increas dyck score decreas match symbol counterpart gadget smaller dyck score remain consid case symbol particip match lemma conclud symbol particip mismatch union symbol gadget symbol symbol align gadget denot number symbol come gadget consid case satisfi requir claim match symbol counterpart symbol symbol particip match symbol contribut dyck score modifi align match symbol counterpart match rest symbol odd number delet contribut dyck score modif complement previous case symbol symbol particip match wlog symbol gadget particip match symbol gadget particip match lemma symbol gadget mismatch assum consid subcas symbol contribut dyck score modif algorithm match symbol counterpart mismatch symbol pair modif dyck contribut symbol odd symbol contribut dyck score symbol delet odd modif algorithm match symbol counterpart mismatch symbol pair delet symbol modif dyck contribut symbol symbol counterpart gadget contribut dyck cost quantiti depend verifi construct claim optim align assum symbol align counterpart analog statement prove symbol proof suppos align symbol will modifi align symbol align come substr consist entir statement symbol symbol mismatch delet lemma symbol mismatch symbol mismatch modifi align achiev goal delet symbol delet symbol delet align delet increas dyck cost match symbol pair decreas dyck cost result decreas dyck cost claim optim align symbol match symbol symbol match symbol symbol gadget analog statement prove symbol proof claim align sequenc consist suppos sequenc gadget claim align sequenc consist suppos sequenc gadget prove suppos case left order revers construct align cross suppos gadget verifi satisfi condit claim assum symbol align symbol remov gadget interact symbol decreas dyck cost left neighbor will chang align align symbol result will decreas dyck cost verifi construct symbol particip match symbol particip match lemma conclud symbol mismatch sequenc symbol modifi align symbol sequenc mismatch symbol align symbol delet increas dyck cost symbol align symbol transfer alignmet symbol symbol mismatch chang dyck cost align symbol pair decreas dyck cost decreas dyck cost prove want claim optim align symbol symbol match gadget symbol symbol match gadget case gadget analog statement prove symbol proof suppos match symbol come gadget earlier assum gadget sequenc assumpt remov claim check symbol particip match satisfi requir claim check symbol particip match symbol particip match symbol particip match lemma conclud symbol particip mismatch denot sequenc denot sequenc lemma assum symbol match form suffix sequenc rest symbol sequenc mismatch delet correspond modif increas dyck cost suffix suffix equal total number symbol construct suppos mismatch symbol match unmatch symbol chang dyck cost suppos odd delet symbol mismatch symbol delet match unmatch symbol check match dyck cost increas match symbol counterpart decreas dyck cost total decreas dyck cost note proof claim remov cliqu graph number cliqu graph remov cost remov arriv sequenc form requir claim set proof claim finish readi construct graph prove theorem remind theorem dyck edit distanc sequenc length solv time cliqu node graph solv time reduct combinatori proof graph node construct sequenc describ sequenc construct time enumer subset node length algorithm dyck edit distanc statement return dyck score time treat constant claim score determin cliqu step reduct combinatori acknowledg piotr indyk discuss led work roy frostig introduc modern work cfg pars alex doni ryan william anonym review comment support nsf simon foundat support stanford school engin hoover fellowship nsf grant ccf nsf grant ccf bsf grant bsf refer aak noga alon alexandr andoni tali kaufman kevin matulef ronitt rubinfeld ning xie test wise wise independ proceed annual acm symposium theori comput san diego california usa june noga alon ravi boppana monoton circuit complex boolean func tion combinatorica amir abboud artur backur virginia vassilevska william tight hard lcs sequenc similar measur ieee annual symposium foundat comput scienc foc appear alexandr andoni robert krauthgam krzysztof onak polylogarithm proxim edit distanc asymmetr queri complex foundat comput scienc foc annual ieee symposium ieee noga alon michael krivelevich benni sudakov find larg hidden cliqu random graph random struct algorithm tatsuya akutsu approxim exact algorithm rna secondari structur predict recognit stochast context free languag algorithm comput intern symposium isaac taejon korea decemb proceed amir abboud kevin lewi ryan william lose weight gain edg algorithm esa annual european symposium wroclaw poland septemb proceed alexandr andoni question rna fold http titl open_problem onlin access march alfr aho thoma peterson minimum distanc error correct parser context free languag siam journal comput alfr aho ravi sethi jeffrey ullman compil principl techniqu tool addison wesley longman publish boston usa miscellan author queri problem sigact news jame baker trainabl grammar speech recognit journal acoust societi america artur backur piotr indyk edit distanc comput subquadrat time seth fals stoc karl bringmann marvin nnemann quadrat condit lower bound string problem dynam time warp arxiv preprint arxiv jose miguel bene joan andreu nchez fast stochast context free pars stochast version valiant algorithm pattern recognit imag analysi springer rolf backofen dekel tsur shay zakov michal ziv ukelson spars rna fold time space effici algorithm journal discret algorithm ccf jianer chen benni chor mike fellow xiuzhen huang david jued iyad kanj xia tight lower bound parameter hard problem inf comput timothi chan speed russian algorithm log arithm factor proceed twenti sixth annual acm siam symposium discret algorithm soda san diego usa januari jianer chen xiuzhen huang iyad kanj xia strong comput lower bound parameter complex comput syst sci noam chomski formal properti grammar control timothi chan mosh lewenstein cluster integ addit binator stoc thoma cormen charl leiserson ronald rivest clifford stein troduct algorithm third edit mit press edit john cock jacob schwartz program languag compil preliminari note technic report revis technic report cim nyu shay cohen giorgio satta michael collin approxim pcfg pars tensor decomposit hlt naacl durbin eddi krogh mitchison biolog sequenc analysi cam bridg univers press franklin derem practic translat languag phd thesi mas sachusett institut technolog jay earley effici context free pars algorithm commun acm friedrich eisenbrand fabrizio grandoni complex fix paramet cliqu domin set theoret comput scienc yelena frid dan gusfield simpl practic complet frac log time algorithm rna fold russian speedup algorithm bioinformat springer charl fischer jon mauney role error product syntact error correct comput languag herv gallair recognit time context free languag ture machin control franc gall power tensor fast matrix multipl intern symposium symbol algebra comput issac kobe japan juli gcs robin gutel cannon shang serra stori unpair adenosin base ribosom rnas journal molecular biolog graham ruzzo harrison improv context free recogn acm tran program lang syst johan hastad cliqu hard approxim acta mathematica ivan havel michael harrison pars determinist languag acm elad hazan robert krauthgam hard approxim best nash equilibrium siam comput john hopcroft rajeev motwani jeffrey ullman introduct automata theori languag comput edit addison wesley longman pub lish boston usa juri hartmani richard stearn comput complex algo rithm transact american mathemat societi mark jerrum larg cliqu elud metropoli process random struct algorithm daniel jurafski jame martin speech languag process introduc tion natur languag process comput linguist speech recogni tion prentic hall ptr upper saddl river usa edit richard karp reduc combinatori problem proceed symposium complex comput comput held march ibm thoma watson center yorktown height york tadao kasami effici recognit syntax algorithm context free lan guag technic report afcrl air forc cambridg lab bed ford donald knuth translat languag left control flip korn barna saha divesh srivastava shanshan ying repair structur problem semi structur data proc vldb endow juli bernard lang determinist techniqu effici determinist parser springer lillian lee fast context free grammar pars requir fast boolean matrix multipli cation acm gene myer match context free languag process letter poljak complex subgraph problem commentation math universitati carolina adam paul dan klein best pars proceed joint confer annual meet acl intern joint confer natur languag process afnlp volum volum associ comput linguist tamar pinha dekel tsur shay zakov michal ziv ukelson edit distanc duplic contract revisit combinatori pattern match springer sanguthevar rajasekaran marius nicola error correct parser context free grammar take cubic time arxiv preprint arxiv alexand rush david sontag michael collin tommi jaakkola dual decomposit linear program relax natur languag process proceed confer empir method natur languag process associ comput linguist walter ruzzo complex general context free languag pars recog nition extend abstract proceed colloquium automata lan guag program wojciech rytter fast recognit pushdown automaton context free languag control wojciech rytter context free recognit shortest path comput version algorithm theor comput sci barna saha dyck languag edit distanc problem linear time ieee annual symposium foundat comput scienc foc philadelphia usa octob barna saha faster languag edit distanc connect pair shortest path problem corr barna saha languag edit distanc maximum likelihood pars stochast grammar faster algorithm connect fundament graph problem ieee annual symposium foundat comput scienc foc pear giorgio satta tree adjoin grammar pars boolean matrix multipl comput linguist richard socher john bauer christoph man andrew pars composit vector grammar proceed acl confer cites joel seifera simplifi lower bound context free languag recognit infor mation control michael sipser introduct theori comput intern thomson publish edit yinglei song time space effici algorithm rna fold russian techniqu arxiv preprint arxiv volker strassen gaussian elimin optim numerisch mathematik lesli valiant general context free recognit cubic time journal comput system scienc virginia vassilevska effici algorithm cliqu problem inf process lett balaji venkatachalam dan gusfield yelena frid faster algorithm rna fold russian method wabi reinhold weicker general context free languag recognit ram uniform cost criterion time technic report pennsylvania state univers ryan william algorithm optim constraint satisfact implica tion theoret comput scienc virginia vassilevska william multipli matric faster coppersmith winograd proceed symposium theori comput acm ryan william faster pair shortest path circuit complex stoc gerhard woeging space time complex exact algorithm open problem parameter exact comput volum lectur note comput scienc gerhard woeging open problem exact algorithm discret appli mathemat vassilevska william william subcub equival path matrix triangl problem proc foc daniel younger recognit pars context free languag time control huacheng improv combinatori algorithm boolean matrix multipl automata languag program intern colloquium icalp kyoto japan juli proceed shay zakov dekel tsur michal ziv ukelson reduc worst case run time famili rna cfg problem approach wabi 