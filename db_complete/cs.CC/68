hard sorted constraint irena rusu université nant rue houssinièr nant franc abstract constraint program global constraint allow model solv combinatori problem constraint sorted constraint defin propag algorithm tractabl settl sort constraint older intract assum integ variabl domain limit interv consequ result hold sort constraint zhou intract hold stabil condit introduc keysort key constraint carlsson requir order variabl list preserv list keysort key intract well keyword sorted constraint hard graph match introduct constraint program system support increas number global constraint con straint number variabl arbitrari constraint defin search space prune constraint propag algorithm implement notion consist propag algorithm remov infeas valu main variabl effici evalu regard abil limit search space regard run time deal global constraint general fix constraint set constraint intract constraint complex rang tractabl level consist alldiffer constraint intract low level consist linear equat tractabl constraint settl constraint fine case sorted constraint sort sort keysort key constraint implement well system sicstus prolog gecod choco well constraint model languag minizinc hard unknown paper intuit simplest sorted constraint sort intract case domain variabl disjoint lead intract sort keysort key organis paper terminolog notat paper transform idea search support sort graph match problem call sortsupport associ instanc complet problem equal instanc sortsupport devot proof construct polynomi transform impli complet sortsupport deduc hard three sorted problem conclus constraint consist paper deal constraint integ domain variabl denot dom domain assum finit set integ dom written interv integ union interv understand integ union interv defin constraint coupl set variabl associ domain dom ari relat equival subset constraint satisfi tupl assign variabl denot dom dom dom satisfi tupl support constraint satisfact problem csp defin set variabl asso ciat domain set constraint defin subset variabl set solut csp assign valu associ domain variabl satisfi constraint order solv csp constraint success prune search space help propag algorithm seek enforc consist properti defin domain domain consist con straint variabl dom support assign domain consist strong requir variant bound consist progress weaker altern denot infd supd minimum maximum dom domain bound consist variabl infd supd exist integ dom satisfi domain bound consist variabl infd supd exist integ infd infd satisfi final domain bound consist variabl infd supd exist real number infd infd satisfi defin sorted constraint sort constraint defin variabl set satisfi tupl valu assign variabl variabl sort list variabl correspond variabl permut propag algorithm achiev bound consist propos sort constraint defin general sort constraint set variabl domain includ order bring mutat variabl set constraint constraint variabl set satisfi tupl valu variabl sort list variabl variabl distinct permut associ variabl defin variabl propag algorithm sort constraint reduc domain variabl achiev bound consist domain domain keysort key constraint key posit integ defin allow add featur respect sort variabl tupl integ common variabl key element form sort key variabl lexicograph order sort stabl pair variabl key order domain dom variabl tupl domain key lexicograph order key classic order integ keysort sort requir stabil sort empti set integ write lex exist valu intend order set allow compar domain variabl respect possibl order assign valu link sorted graph match consid set variabl finit integ domain dom dom defin intersect graph bipartit graph vertex set edg set dom dom match inject function edg notat design match match satur vertex exist edg endpoint perfect match satur vertic denot dom dom defin test sort support equival solv problem sortsupport instanc set variabl finit integ domain dom dom question perfect match lex lex lex sortsupport complet case domain dom disjoint match fulfil requir condit call sort match note order element defin sort match adapt graph construct notat duction complet problem equal variant claus requir true fals liter instanc equal claus three liter set assum liter occur instanc time add appropri number claus note occ total number occurr claus posit occurr negat occurr build instanc sortsupport consist unit graph gij figur posit negat occurr liter claus vertic gij variabl aij bij cij aij bij cij join edg aij bij bij cij call edg bij aij cij bij call edg unit graph posit negat depend occurr repres figur unit graph gij posit negat occurr note variabl aij belong variabl aij bij cij belong figur consist compon ccj assum liter occur claus liter occur claus horizont edg link edg link edg posit consist compon ccj figur liter connect unit graph associ posit negat occurr unit graph arbitrarili order correspond altern posit negat occurr unit graph associ posit occurr link edg join aij vertex negat unit graph crj vertex posit unit graph circular link edg join cij vertex posit unit graph arj vertex negat unit graph truth compon figur claus connect three unit graph associ liter note negat unit graph drawn edg vice versa vertic defin defin join cij vertex negat unit graph aij vertex posit unit graph join cij vertex negat unit graph aij vertex posit unit graph edg call later edg complet compon provid edg truth compon allow local truth valu liter consi tenci compon guarante local truth valu global correct liter true fals complet compon ensur exist perfect match graph notic claus occurr aji figur truth compon assum associ claus dash line outgo vertic belong unit graph link edg insid consist compon vertex dash line outgo symbol set edg complet compon note negat unit graph drawn edg vice versa liter notat identifi unit graph associ occurr enter detail present order simpl defin requir order element assum unit graph element aij bij cij rang order consist compon ccj unit graph order altern arbitrari order chosen build ccj recal unit graph ccj posit global order built consid ccp consist compon order vertic order exampl consist compon unit graph posit negat order posit negat order posit negat order truth correspond definit includ unit graph unit graph complet compon edg order variabl finish construct defin domain vertic exact defin sought intersect graph simplifi notat domain vertex denot vertex upper case lower case dom aij denot aij vertic remark note sequel seek minim size domain defin proof complet avoid domain singleton order allow better illustr domain intersect figur aij aij dom dom aij bij dom bij arj dom dom dom dom dom dom dom dom dom dom aij aij ail aif aif ail aij dom dom asj bij figur domain variabl gij fix overlap domain claus assum occurr liter notat asj arj refer domain variabl asj arj unit graph gsj grj preced follow gij circular order ccj main domain variabl drawn plain line secondari domain drawn dash line posit gij dot line negat gij convent extend gsj grj assum third case definit xij unit graph figur defin domain includ interv consecut integ call block consist compon ccj defin occ consecut integ consist compon repres interv notic number claus defin defin domain variabl truth compon dom interv devot creat later edg note integ interv dom denot defin dom interv dedic later edg edg unit graph gij defin domain insid block except number unit graph gij global order jocc posit gij altern order ccj domain aij bij cij aij bij cij defin figur aij xij bij cij aij bij cij zij xij dom dom ifgij posit unit graph ifgij negat unit graph gij unit graph inccj occ occ ifgij posit unit graph dom dom ifgij negat unit graph ifgij posit unit graph ifgij negat unit graph zij ifgij posit unit graph ifgij negat unit graph domain defin xij zij call secondari domain aij cij aij cij remain domain explicit state definit aij bij cij aij bij cij call main domain correspond variabl intuit main domain allow build unit graph link edg consist compon unit graph gij main domain variabl belong block secondari domain devot connect unit graph vertic truth compon remain domain recal unit graph gij exist posit egat occurr defin dom gij positivey gij negativez dom gij positivey gij negativez idom dom interv domain variabl dom addit domain construct polynomi yield bipartit graph vertic bipartit vertic consist compon truth compon consist compon intersect graph variabl defin graph wish build claim edg built domain defin variabl exact unit graph gij consist compon ccj truth compon complet compon posit negat occurr proof consid variabl edg belong easi notic main domain variabl aij bij aij bij cij empti intersect main domain set variabl except rule cij figur secondari domain aij cij aij cij special defin guarante intersect domain variabl desir edg ccj empti intersect domain block gij variabl aij main domain aij empti intersect bij edg aij bij secondari domain aij domain gij posit unit graph mean aij dom aij dom edg aij aij exist easi edg endpoint aij exist case gij negat unit graph case unit graph ccj xij empti intersect secondari domain zrj variabl crj posit unit graph grj ccj link edg gij grj gij unit graph ccj xij occ occ xij includ block posit unit graph ccj denot empti intersect interv domain variabl unit graph link edg unit graph variabl bij bij empti intersect main domain aij cij defin edg bij aij bij cij unit graph empti intersect exist bij variabl cij obvious intersect cij bij impli edg cij intersect main domain main domain cij empti intersect secondari domain variabl arj unit graph current graph negat case unit graph join link edg cij arj analyz intersect secondari domain cij case case gij negat intersect dom dom empti desir later edg truth compon claus case gij posit secondari domain cij variabl aij main domain aij empti intersect bij yield edg bij aij bij yield edg variabl consid secondari domain aij gij posit includ dom dom sought later edg gij negat empti intersect main domain vertex csj unit graph preced gij ccj confirm link edg variabl csj variabl bij empti intersect domain variabl variabl aij cij confirm edg variabl cij edg bij cij confirm empti intersect cij bij intersect main domain cij second domain intersect dom dom yield correspond later edg case gij negat contrari case zij intersect xsj defin unit graph gsj negat definit ofxsj withxsj mean gsj negat unit graph preced gij ccj link edg asj cij xsj occ occ xsj secondari domain asj vertex unit graph gsj ccj xsj includ block unit graph ccj empti intersect zij zij concern edg asj link edg close circuit unit graph ccj variabl definit dom three secondari domain variabl type aij cij posit negat occurr edg confirm notic intersect domain variabl empti variabl definit dom empti intersect xij gij posit gij negat yield expect later edg variabl definit dom dom three secondari domain variabl type aij cij allow build expect later edg domain variabl allow build edg incid variabl edg edg vertic verifi check edg unit graph consist compon truth compon complet compon correct built undesir edg claim prove propos construct polynomi transforma tion truth assign satisfi true fals liter claus sort match prove claim gij arbitrari unit graph sort match simultan ousli edg aij bij bij aij simultan edg cij bij bij cij proof aij bij bij aij aij preced bij order sort match contain edg aij bij bij aij bij aij lex aij bij fals cij bij bij cij satisfi cij bij lex bij cij claim ccj arbitrari consist compon sort match satisfi properti edg link edg ccj belong edg link edg ccj belong proof unit graph gij ccj exact edg aij bij cij bij bij satur exact edg bij aij bij claim aij bij bij cij edg gij cij bij bij aij edg gij case cij gij posit aij gij negat satur link edg endpoint gij figur impli previous unit graph gsj ccj circular edg deduct unit graph grj preced gsj link edg edg vertex grj incid edg satur local edg grj properti unit graph edg incid link edg propag consist compon ccj reason case readi prove main result truth compon unit graph gij call close edg gij gij posit edg gij gij negat edg gij call close definit negat unit graph drawn upsid figur close edg gij pair edg endpoint join claim truth assign satisfi true fals liter claus admit sort match proof prove assum assign boolean valu satisfi requir buildm initi empti claus assum liter posit negat occurr assum loss general posit negat occurr true posit negat occurr fals add tom edg gij close edg gil close edg close depend occurr true fals later edg join gil later edg join add link edg need satur three remain unsatur vertic gij gil remain unsatur vertex belong unit graph vertex gif occurr fals vertex occurr posit cif occurr negat adjac contrari occurr true vertex aif occurr posit cif occurr negat adjac add edg add contrari case leav unsatur occurr fals unsatur occurr true equival remain unsatur oversuppli true liter consist compon number posit negat occur renc correspond liter true liter fals liter number claus oversuppli true liter number claus oversuppli posit liter claus case consequ complet compon unsatur vertic induc regular bipartit graph theorem graph perfect match add construct match complet correct built construct impli unit graph edg edg insid consist compon unit graph case case gij glj neighbor unit graph assum loss general gij posit glj negat true impli fals case edg gij close edg glj close ccj edg edg link edg definit match correct built definit correct built perfect match recal associ biject function order inclus properti set dom dom requir sort match pair preced order lex deduct base affirm unit graph gij aij lex bij lex cij case case edg gij belong bij aij cij bij aij gij posit aij csj gsj preced gij ccj gij negat aij aij defin block gij figur bij cij affirm case edg gij belong bij cij aij bij cij asj gsj circular preced gij ccj gij posit cij gij negat deduc cij zij cij zij aij bij affirm pair consecut unit graph gij grj order consist compon ccj cij lex arj consid case edg gij belong deduc cij defin block gij edg grj belong arj grj posit arj grj negat affirm prove consid case edg gij belong deduc cij cij gij posit negat case arj prove affirm pair consecut unit graph gij grj order consecut consist compon cij lex arj notic case gij negat grj posit cij cij depend edg gij belong arj arj case affirm hold unit graph gip consist compon ccp cip lex deduct gip negat cip cip defin block gip liter claus block gip dom includ domain three variabl yield vertic adjac affirm lex obvious definit domain observ dom lex dom dom affirm prove lex obvious definit domain observ dom affirm allow deduc sort match consid theorem assum sort match exist claim match unit graph low edg edg match perfect deduc vertic satur unit graph gij close edg unit graph vertex unit graph gil close edg inm unit graph vertex call gif third unit graph defin local posit negat occurr true fals true edg gif close fals edg gif close deduc local truth assign liter notic local truth assign liter true edg gir belong true exact case occur posit occurr case occurr assign true close edg gir belong negat occurr case assign true negat occurr assign fals close edg gir case close edg edg gir case upsid posit negat unit graph close edg edg gir affirmato claim deduc local truth assign coher claus true liter fals liter occurr notat hard sorted constraint construct preced allow deduc complet sort support general case claim sortsupport complet proof sortsupport belong complet appli claim slight modif domain defin variabl claim sortsupport complet case domain dom pairwis disjoint proof order pairwis disjoint domain idea extend interv set dom shift interv avoid unwish overlap cut larg number interv specif interv dom insur disjoint modifi relat posit real interv defin set share interv share dom dom gij posit zij share dom dom gij negat dom share xij gij posit gij negat dom share xij gij posit gij negat dom exampl consid case posit unit graph gij share dom dom extend interv length three case dom dom interv cours case domain aij aij start domain avoid overlap result augment size block proof correct main differ intersect domain shift theorem test sort sort keysort key port complet case variabl pairwis disjoint domain proof sort affirm equival sortsup port notic claim sort variant sort variabl domain test sort support previous remark allow deduc complet problem final sort keysort equival domain variabl pairwis disjoint stabil sort trivial satisfi assign valu variabl constraint defin enforc domain consist requir test variabl dom support exist assign easili deduc corollari enforc domain consist constraint sort sort keysort key intract case variabl pairwis disjoint domain proof contradict three constraint assum polynomi algo rithm exist test exist support variabl recal claim instanc equal satisfi admit sort match affirm hold sort support appli valu bij arbitrarili chosen variabl bij test polynomi time sort support polynomi algorithm solv equal contradict sort keysort key easili follow focus enforc bound consist test vari infd supd tupl satifsfi exist valu constrain precis belong dom infd supd infd supd allow bound bound bound consist theorem enforc bound consist constraint sort sort keysort key complet proof easi notic problem reduct equal sortsupport allow deduc result sort follow instanc sortsupport built variabl domaindom infd supd notic sort match sort match easi consequ observ dom empti intersect domain includ belong intersect claim deduc complet test support sort assign notic previous result prove pairwis disjoint domain variabl reason variant domain strict overlap domain variabl proof theorem longer valid conclus paper three sorted constraint defin tractabl case variabl sort pairwis disjoint domain seek domain consist enforc bound consist tractabl lower level bound consist bound bound consist sort open sort keysort key refer christian bessier emmanuel hebrard brahim hnich tobi walsh complex global constraint aaai volum mat carlsson sicstus prolog user manual releas https sicstus doc pdf chiu choi warwick harvey jimmi man lee peter stuckey finit domain bound consist revisit advanc artifici intellig springer michael garey david johnson comput intract guid theori complet freeman noell bleuzen guernalec alain colmerau narrow block sort logn principl practic constraint program springer philip hall repres subset london math soc kurt mehlhorn sven thiel faster algorithm bound consist sorted alldiffer constraint principl practic constraint program springer nichola nethercot peter stuckey ralph becket sebastian brand gregori duck guido tack minizinc standard model languag principl practic constraint program springer older swinkel van emden real problem experi bnr prolog proceed third intern confer practic applic prolog pap alinmead softwar irena rusu maximum weight edg constrain match discret appli mathemat christian schult peter stuckey bound domain propag lead search space acm transact program languag system topla christian schult guido tack mikael lagerkvist model program gecod http doc latest choco team choco document http sven thiel effici algorithm constraint propag process tree descrip tion phd thesi universitätsbibliothek willem jan van hoev alldiffer constraint survey arxiv preprint jianyang zhou constraint program solv job shop problem principl practic constraint program springer 