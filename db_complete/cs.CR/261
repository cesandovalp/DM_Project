robust effici elimin cach time side channel benjamin suman dan univers abstract time cach side channel provid power attack sensit oper includ cryptograph implement exist defens protect class attack incur prohibit perform overhead popular strategi defend class attack modifi implement time cach access pattern hardwar instruct independ secret input solut architectur specif brittl difficult paper propos evalu robust low overhead techniqu mitig time cach channel solut requir minim sourc code chang work multipl lan guag platform report experiment appli solut protect java program demonstr solut elimin time cach side channel leak incur lower perform overhead exist approach introduct defend cach time side channel attack hard problem time cach attack extract cryptograph secret run system spi web user activ undo privaci differenti privaci system attack exploit time side channel demonstr remot local adversari remot attack separ target network local attack execut unprivileg spywar target machin exist defens cach time attack protect subset attack incur perform overhead exampl defend remot time attack sure time extern observ event independ data secret strategi propos achiev includ applic specif chang static transform dynam pad strategi defend local time attack attack spi target applic measur impact local cach resourc strategi defend local cach attack static partit resourc flush state obfusc cach access pattern moder access fine grain timer incur perform penalti leav target vulner time attack survey method work viii popular approach defend local remot time attack ensur low level instruct sequenc instruct perform depend secret enforc manual write code chang compil ensur generat code properti popular strategi fail ensur secur reason time properti instruct differ subtl way architectur processor model instruct sequenc unsaf architectur processor model second strategi work languag java java virtual machin jvm optim bytecod runtim inad vertent introduc secret depend time variat third manual ensur code transform prevent time attack extrem difficult tedious case updat openssl prevent lucki thirteen time attack contribut propos low overhead applic independ cross languag defens protect local remot time attack minim applic code chang defens languag independ appli strategi protect applic written java defens requir simpl modif under shelf hardwar implement approach linux execut time protect function independ secret data demonstr perform overhead defens low exampl perform overhead protect entir state machin run insid ssl tls server time cach base side channel attack connect latenc summar key insight solut scribe detail leverag programm code annot identifi protect sensit code oper secret data defens mechan protect sensit func tion minim perform impact scheme leav perform sensit function unchang case rsa privat key oper openssl addit defens call blind minim perform overhead sepa rate accur account secret depend secret independ time variat secret independ time variat caus interrupt schedul secret execut flow leak sensit attack treat differ secret depend variat scheme demonstr exist servic schedul hardwar featur memori hierarchi leverag creat lightweight isol mechan protect sensit execut local untrust process minim time variat execut naiv implement delay loop exist hardwar leak time under delay nop instruct limit accuraci creat evalu scheme implement delay loop prevent leakag exist coars grain delay primit design evalu lazi state cleans mechan clear sensit state left share hardwar resourc branch predictor cach hand untrust process find lazi state cleans incur overhead perform state clean sensit function finish execut time attack describ propos defens survey type time attack previous discuss differ local remot time attack local time attack addit monitor total comput time spi target applic monitor state share hardwar resourc local cach concurr concurr attack concurr attack attack probe share resourc target applic oper exampl attack measur time inspect state share resourc intermedi step sensit oper process control concurr access adjust schedul paramet core affin case symmetr multiprocess smp concurr attack attack observ time share hardwar state sensit comput exampl concurr attack extract secret aggreg time take target applic process request local attack concurr local attack preval class time attack literatur attack extract secret privat key wide rang cipher includ rsa elgam attack exploit leakag wide rang share hardwar resourc data cach cach instruct cach branch predictor cach float point multipli local concurr attack well osvik tromer bonneau mironov type local concurr attack implement prime probe attack prime cach trigger cryption probe cach learn privat key spi process prime cach load memori content cach probe cach measur time reload memori content encrypt complet attack involv spi process measur time indirect extract victim applic altern evict time strategi attack measur time perform victim oper evict chosen cach line trigger victim oper measur execut time compar execut time attack find cach line access victim oper osvik extract bit key encrypt prime probe attack remot attack exist remot attack concurr fundament pothet remot concurr attack remot attack submit request victim applic time adversari client send request sensit victim applic attack measur time intermedi step adversari communic victim applic infer sensit content iii threat model allow attack local remot execut concurr concurr target applic assum attack spi process privileg user super user privileg owner target applic assum spi process bypass standard user base isol provid oper system realist assumpt assumpt fail spi process steal sensit resort side channel attack exist oper system model oper system under hardwar trust expect attack physic access hardwar monitor side channel electromagnet radiat power acoust eman concern time cach side channel easiest side channel exploit physic access victim machin solut solut develop annot function perform ing sensit comput protect rest paper refer function protect function solut instrument protect function stub code invok execut protect function stub code ensur protect function function invok execut secret oper safe local remot time attack solut automat prevent leakag sensit function protect unprotect invok protect execut solut ensur properti protect function ensur execut time protect function observ remot local attack independ secret data function oper prevent attack learn sensit format observ execut time protect function clean state left share hardwar resourc cach protect function hand resourc untrust process describ earlier threat model iii treat process untrust belong user perform protect comput cleans share state lazi manner minim perform overhead prevent concurr untrust process cess intermedi state left share hardwar resourc protect execut achiev effici dynam partit share resourc incur minim perform overhead cach cach cach cach cach cach cach user color isol protect cach line user process preempt protect appli pad secret independ lazili clean core resourc core core core protect untrust process untrust process fig overview solut figur main compon solut high level mechan provid properti describ protect function time pad prevent leakag share resourc summar mechan describ detail section time pad time pad sure protect execut time depend secret data basic idea time pad sim ple pad protect execut time worst case runtim input idea pad execut time upper limit prevent time channel explor prior project solut suffer major problem prevent adopt real set incur prohibit perform overhead macro benchmark add larg amount time pad order prevent time leakag remot attack protect local adversari infer actual unpad execut time side channel network event monitor cach access pattern period interv solv problem paper main contribut low overhead time pad scheme prevent time leakag protect function local remot attack minim requir time pad compromis secur adapt worst case time estim three principl adapt worst case execut estim target hardwar protect function pro vide offlin profil tool automat estim worst case runtim protect function run target hardwar platform prior scheme estim worst case execut time complet servic web server hardwar configur estim time pad hurt perform protect local remot attack ensur ing untrust process interven protect execut appli time pad protect execut sure minim overhead prevent local attack learn run time protect function prior scheme appli larg time pad send output network scheme secur local attack local resourc cach behavior infer execut time individu protect function time variat result factor secret depend prevent secret independ harm exampl time variat schedul interrupt handler general harmless accur measur account secret depend variat ignor secret independ variat comput optim time pad need protect secret data exist time pad scheme distinguish secret depend secret independ variat unnecessarili larg time pad secret depend time variat small prevent leak share resourc prevent format leakag share resourc perform overhead process execut protect function malici process approach leverag multi core processor architectur modern processor minim amount share resourc protect execut hurt perform dynam reserv exclus access physic core includ core cach execut protect function ensur local attack concurr access core resourc protect function access cach share multipl core color ensur cach access protect execut restrict reserv por tion cach ensur reserv portion share user process prevent attack learn protect function cach lazili cleans state left core resourc cach branch predictor resourc share core cach hand untrust process minim overhead caus state cleans oper time pad design safe time pad scheme defend local remot attack infer sensit observ time behavior protect function sign consist main compon estim pad threshold appli pad safe leak describ compon detail determin pad time pad account secret depend time variat discard variat interrupt schedul preemption reli abil track number extern preemption adapt total pad time base amount time protect function preempt tmax worst case execut time protect function extern preemption occur text preempt worst case time spent pre emption set preemption occur execut protect function pad mechan pad execut protect function tpad cycl tpad text preempt tmax leak amount preemption time attack independ secret attack learn estim tmax time pad scheme requir tight estim worst case execut time wcet protect function prior project estim wcet static analysi tech niqu techniqu requir precis accur model target hardwar cach branch target buffer hard practic implement simpl dynam profil method estim wcet describ time pad time pad target leak fig time leakag naiv pad scheme tie wcet estim method work estim tool estim wcet tmax dynam offlin pro file protect function hardwar specif perform profil actual hardwar will protect function gather profil informa tion applic invok protect function input generat script provid applic develop system administr reduc possibl overtim occur uncommon input script generat common uncommon input instrument protect function applic worst case perform behavior store profil file comput pad paramet base profil conserv profil measur protect function high load condit parallel applic produc load memori cpu comput tmax measur worst case time bound fraction profil read exclud secur paramet tradeoff secur perform higher valu reduc tmax increas chanc overtim prototyp implement set safe appli pad pad amount determin techniqu describ earlier wait target amount easi glanc major issu applic pad complic practic describ handl limit accuraci pad loop solut depend fine grain pad naiv pad scheme leak limit accuraci pad loop figur naiv pad scheme repeat measur elaps time tight loop target time reach leak time loop break condit evalu iter loop take cycl pad loop leak time mod note earlier time pad scheme problem pad amount larger solut guarante distribut run time protect function set privat input indistinguish distribut produc set privat input function call properti safe pad properti overcom limit simpl wait loop perform time random step enter simpl wait loop step perform round random wait oper goal step ensur amount time spent protect function simpl wait loop modulo stabl period simpl time loop disregard iter close uniform techniqu view perform random walk integ modulo runtim distribut wait oper support walk number step walk prior work chung explor suffici condit number step walk support produc distribut exponenti close uniform purpos paper perform time random izat random oper input run cycl input constant describ detail oper choos defeat empir statist test patholog condit favor attack guarante hold random insid random wait oper generat cryptograph secur generat attack predict random nois subtract observ pad time deriv origin time signal modulo pad scheme pad target time tpad simpl pad loop perform random step execut protect function will leak durat protect function long condit hold preemption occur random step yield distribut runtim uniform modulo iii simpl pad loop execut iter reach stabl period secur scheme assumpt prove assum iter simpl wait loop cycl assum simpl wait loop iter time reach stabl period safe assum depend simpl wait loop start run random step assum amount time spent start iter simpl wait loop modulo uniform distribut loop will break time target time target time iter began elaps execut time uniform distribut modulo case will occur equal probabl protect function pad durat function will follow uniform distribut valu target time attack will learn observ pad time function reduc worst case perform cost random izat step generat requir random start protect function measur start time protect function variabl runtim random generat increas tpad return point protect function tbegin hold time function start ibegin hold preemption count function start short random delay ttarget tbegin tmax overtim current time current time ttarget check measur preemption count adjust target text preempt preemption ibegin tpenalti tnext tbegin tmax text preempt overtim overtim detect support tnext overtim overtim tovertim tnext tnext overtim adjust break tnext ttarget return ttarget tnext fig algorithm appli time pad protect execut handl preemption occur insid pad loop scheme present assum extern pre emption occur execut pad loop block preemption pad loop will degrad respons system avoid issu allow interrupt process execut pad loop updat pad time repeat updat pad time respons preemption safe exit condit met pad approach initi pad target tpad preemption occur repeat increas text preempt pad adjust pad target execut pad loop preemption occur pseudocod approach figur techniqu leak actual runtim protect function final pad target depend pattern preemption initi elaps time enter pad loop note forward progress pad loop guarante long preemption rate limit core execut protect function algorithm comput text preempt base observ preemption simpli multipli constant tpenalti number preemption text preempt match worst case execut time observ preemption tpenalti worst case execut time singl preemption tmax tpenalti machin specif determin empir profil data handl overtim wcet estim patholog input protect function time input observ experi patholog input appear wild protect function longer estim worst case bound will result overtim leak attack learn patholog input process augment techniqu detect overtim elaps time protect function interrupt account greater tpad option limit leakag overtim detect refus servic request system administr updat secret secret key increas paramet tmax model support updat tmax protect function fli restart run applic pad paramet store file access permiss applic librari protect function file memori map correspond protect function call time chang memori map file will impact pad paramet applic invok protect function middl appli estim pad note overtim leak log bit total number time measur ment observ attack consid string time observ attack overtim uniqu string maximum content string blog bit log bit overtim actual leakag depend entropi time pattern input exampl execut time secret input larger input leak bit will attack infer complet secret input minim extern preemption note tpad leak sensit pad will incur perform overhead text preempt high frequent long run preemption protect execut minim extern event delay execut protect function describ main extern sourc delay deal detail preemption user process regular circumst execut protect function preempt user process delay execut protect function long process preempt minim preemption keep system usabl solut prevent preemption user process execut protect function schedul polici prevent migrat process core prevent user process schedul core durat protect execut preemption interrupt common sourc preemption hardwar interrupt serv core execut protect function solv problem block rate limit number interrupt serv core execut protect function techniqu system respons heavi load reason current prototyp solut appli techniqu note interrupt network inter rupt trigger attack attack slow protect execut solut attack creas text preempt degrad perform leakag page attack arbitrarili slow protect function caus memori page event execut protect function avoid case solut forc process execut protect function lock memori disabl swap consequ solut current allow process alloc memori physic target system protect function hyperthread hyperthread techniqu port modern processor core physic core support multipl logic core oper system independ schedul task logic core hardwar transpar take care share under physic core observ protect function execut core hyperthread enabl encount larg amount slowdown slowdown caus concurr process execut ing physic core interfer access cpu resourc potenti avoid slowdown con figur schedul prevent untrust process run concurr physic core process middl protect function mechan result high overhead cost activ unschedul migrat process run virtual core current prototyp implement simpli disabl hyperthread system configur cpu frequenc scale modern cpus includ mech anism chang oper frequenc core dynam runtim depend current work load save power frequenc decreas middl execut protect function enter halt state save power will longer real time increas tmax reduc variat disabl cpu frequenc scale low power cpu state core execut protect function prevent leakag share resourc prevent leakag protect function share resourc way isol share sourc concurr process lazili cleans state left share resourc hand untrust process isol share resourc protect function concurr process help prevent local time cach attack well improv perfor manc minim variat runtim protect function isol core resourc describ earlier tion disabl hyperthread core protect execut improv perform ensur attack spi code snoop core state protect function execut prevent preemption user process execut protect function ensur core cach dedic protect function prevent leakag perform counter modern hardwar perform counter track perform event number cach evic tion branch mispredict occur core local attack access perform counter infer secret protect execut solut restrict access perform mon itor counter process detail perform metric process restrict user hardwar perform counter measur perform process prevent leakag cach cach share resourc multipl core color dynam isol protect data cach support color modifi physic alloc alloc reserv secur color caller request secur color color base cach set map color guarante conflict cach cach line order support color disabl transpar huge set access control huge attack access huge evad isol provid color huge span multipl color prevent access huge transpar request privileg user implement color disabl memori dedupl featur kernel merg prevent secur color map process transpar map share process disabl memori dedupl uniqu solut hypervisor prevent leakag virtual machin process call protect function time invok kernel modul routin remap alloc process privat map heap stack text segment librari code librari data share process ensur color reserv user execut protect function remap transpar chang physic process access modifi virtual memori address requir special applic support user reserv color remain reserv color alloc reserv color user process flag secur color bit modifi recogn flag ensur futur alloc privat map process will reserv color user note remap privat map protect applic access share map insid protect function strategi alloc color user minor potenti downsid system restrict number user process concurr call protect function restrict reason trade secur perform lazi state cleans ensur attack taint state core resourc protect function finish execut lazili delet core sourc protect function return mark cpu taint user caller process time attempt schedul process user core will flush cpu cach includ instruct cach data cach cach branch translat buffer btb translat lookasid buffer tlb scheme ensur overhead flush cach amort multipl invoc protect function user implement built prototyp implement protect mechan system run linux describ compon implement program api implement function annot fix time languag indic function protect annot declar function definit annot chang code base programm order solut wrote plugin clang compil handl annot plugin automat insert call function fix time start protect function call fix time return point function function protect annot function mechan describ altern programm call function explicit protect rang code function state transit tls state machin provid java nativ interfac wrapper fix time fix time function support protect function written java time pad implement time pad loop read timestamp counter processor collect time measur ment modern processor includ test timestamp counter constant frequenc power save state processor generat pseudorandom byte random pad step chacha stream cipher tpenalti bound worst case slowdown singl interrupt observ experi implement random wait oper take input simpli perform noop loop larg loop take cycl longer addit iter observ suffici achiev properti modif solut implement loadabl kernel modul modul support ioctl call mark core taint protect execut modul support ioctl call enabl fast access interrupt context switch count standard linux kernel interrupt count access proc file system interfac interfac slow purpos kernel modul alloc counter map virtual address space call process task struct call process pointer counter modifi kernel check interrupt context switch current task increment correspond counter offlin profil provid profil wrapper script fix time record comput worst case execut time paramet protect function well worst case slowdown function preemption interrupt kernel task profil script automat generat profil format protect function execut run applic input pro file process varieti applic parallel creat stress test environ trigger worst case perform protect function allow stress tester maxim slow user applic reset schedul paramet cpu affin thread start protect function stress tester generat interrupt high frequenc simpl program generat flood udp packet loopback network interfac linpack high cpu load larg amount memori content prevent leakag share resourc isol processor core core specif cach disabl hyperthread linux select disabl virtual core prevent process interf execut protect function prototyp implement simpl version color scheme describ prevent user observ hardwar perform counter show perform behavior user process perf event framework linux mediat access hardwar perform counter configur framework allow access cpu perform counter privileg user note unprivileg user articl intel math kernel librari linpack download access process perform counter measur perform process ensur processor core execut pro tect function preempt user process depend schedul mode prevent userspac process preempt protect function purpos linux sched fifo schedul mode maximum prioriti order allow unprivileg user sched fifo prioriti chang limit secur file side techniqu protect function manual yield schedul perform block oper process invok protect function schedul allow block oper system call insid protect function mention earlier disabl page process execut protect function mlockal system call mcl_futur detect protect function violat condit isol execut determin voluntari context switch occur protect func execut indic protect function yield cpu manual perform block oper flush share resourc modifi linux schedul check taint core schedul user process processor core flush core resourc need describ flush cach iter read segment memori larger correspond cach size effici wbinvd instruct observ cost microsecond test flush instruct cach execut larg number nop instruct current implement linux flush tlb context switch separ flush linux start leverag pcid featur processor futur tlb flush explicit flush btb leverag branch slide consist altern condit branch nop instruct evalu approach appli protect wide varieti softwar evalu solut three set solut prevent local remot time attack set describ set detail encrypt algorithm implement high level interpret languag java tradit cryptograph algorithm implement interpret languag java harder protect time attack implement low level languag interpret languag compil machin code fli time jit code compil techniqu jit compil optim code determinist improv perform extrem hard programm reason transform requir sensit time behavior secret independ develop write low level code featur assembl care control machin code implement low level control simpli higher level languag techniqu care issu demonstr defens comput time java implement cryptograph algorithm independ secret key minim perform overhead cryptograph oper ssl tls state machin plement cryptograph primit pub lic privat key encrypt decrypt routin suffer side channel attack exampl cryptograph hash algorithm sha take amount time depend length input data fact time variat exist attack ssl tls protocol lucki time perform comput implement stage ssl tls state machin depend secret key find protect mechan protect cryp tograph primit hash function well individu stage ssl tls state machin time attack incur minim overhead sensit data structur cryptograph algorithm time channel occur context data structur oper hash tabl lookup exampl hash tabl lookup amount time depend item bucket desir item locat will longer time find item bucket higher number item item signal exploit attack denial servic attack demonstr techniqu prevent time leak associ array stl popular hash tabl implement experi setup perform experi machin intel xeon cpus organ socket physic core core instruct cach data cach cach socket cach machin total ram experi openssl version java version bouncycastl beta test machin run linux kernel version modif discuss secur evalu prevent simpl time attack determin effect ness safe pad techniqu test techniqu protect larg time channel distinguish input simpl function job easier craft simpl function easili observ time channel function durat input unprotect durat time pad random nois durat full protect pad random nois durat fig defeat distinguish attack execut loop iter input iter loop instruct implement loop singl nop instruct bodi loop assum attack call protect function direct measur timestamp counter call goal attack distinguish input monitor execut time function note condit extrem favor attack defens complet defeat distinguish attack despit high favor condit attack time random step describ critic protect naiv pad loop time random step leak figur distribut observ runtim protect function input defens appli figur runtim distribut pad reach tmax cycl time random step case observ time distribu tion input clear distinguish figur distribut round time random appli time pad case longer distinguish time distribut quantifi possibl success distinguish round nois tis tic input fig multipl round random nois addit time channel attack figur plot variat empir statist distanc observ distribut amount pad nois chang statist distanc comput formula measur statist distanc set observ rang cycl side dian observ distribut consist observ dash figur statist distanc instanc test function input solid statist distanc instanc input observ attack complet prevent round nois prevent time attack rsa decrypt evalu effect time pad approach defeat time attack brumley unblind rsa implement blind algorithm modif rsa random prevent time attack isol impact specif defens appli defens rsa implement openssl constant time defens disabl order configur openssl disabl blind constant time exponenti implement word base montgomeri reduct implement measur time decrypt byte messag random bit key chose messag montgomeri represent differ multipl figur averag observ run time decrypt oper messag display left sort order montgomeri reduct occur decrypt messag sampl rough time sampl random split sampl set observ brumley number montgomeri reduct rough determin messag tio trial unprotect messag protect messag fig protect time attack unblind rsa run time unprotect rsa decrypt deriv full length key appli defens decrypt tmax set cycl timer interrupt guarante occur oper timer interrupt occur rate target machin collect measur observ multi modal pad distribut narrow disjoint peak corr spond pad algorithm text preempt valu interrupt peak repres sampl observ probabl vari messag figur averag observ time consid observ peak sampl split random sampl set key sampl time observ messag depend signal prevent cach attack encrypt verifi system protect local cach attack measur effect defens prime probe attack osvik softwar implement encrypt openssl test appli attack round full condit favor attack subsequ round add nois cach read attack attack prime cach fill select cach set memori line attack coerc victim process perform encrypt chosen plaintext processor core final attack reload memori line fill cach set prior encrypt allow attack detect reload line cach monitor time perform counter infer memori line access encrypt oper test machin openssl softwar impl unprotect cach set protect cach set fig protect cach attack softwar mentat perform tabl lookup round encrypt access cach set lookup tabl actual cach set access oper determin xor top bit plaintext byte key byte repeat observ cach access chosen plaintext take valu top bit rest plaintext random attack observ cach access pattern reveal top bit top bit key simpl attack extend learn entir key hardwar perform monitor counter count cach miss probe measur measur subtract averag measur cach set valu figur figur probe measur perform attack valu top bit left protect scheme darker cell indic elev measur impli cach set load attack prime phase evict encrypt secret key random chosen solut cach set access pattern reveal determin top bit solut flush cach lazili hand untrust process ensur signal observ attack figur perform evalu perform cost individu compon tabl individu cost compon defens total perform overhead total sum compon perform oper critic path note retriev number time process interrupt determin voluntari context switch occur protect compon cost time random step wcet interrupt counter detect context switch set restor sched fifo set restor cpu affin flush cach flush btb cach tabl perform overhead individu compon defens wcet indic worst case execut time cost list upper half tabl incur call protect function execut neglig modif linux kernel describ microbenchmark cryptograph oper multipl lan guag perform set microbenchmark test impact solut individu oper rsa ecdsa sign openssl librari bouncycastl java librari order appli defens bouncycastl construct jni wrapper function call fix time fix time function librari implement rsa blind defend time attack disabl rsa blind appli defens microbenchmark tabl note delay experienc real applic will micro benchmark real applic will perform oper will amort perform overhead openssl solut add rsa ecdsa cost comput signatur averag offer reduc tail latenc rsa signatur behavior caus fact openssl regener blind factor call sign function amort perform cost generat blind factor focus bouncycastl solut decreas cost rsa sign creas cost ecdsa sign compar stock bouncycastl implement increas cost ecdsa justifi increas secur stock bouncycastl implement defend local time attack optim configur java schedul garbag collect protect function execut reduc overhead macrobenchmark protect tls state machin appli solut protect server side implement tls connect protocol openssl tls protocol implement state machin openssl pre sent challeng appli solut defin term protect function addit read write socket interleav cryptograph oper specif tls protocol conflict requir block perform protect function rsa bit sign tail openssl blind stock openssl openssl solut bouncycastl blind stock bouncycastl bouncycastl solut ecdsa bit sign tail stock openssl openssl solut stock bouncycastl bouncycastl solut tabl impact perform sign byte messag sha rsa ecdsa openssl boun cycastl implement measur millisecond disabl blind appli defens rsa signatur oper bold text indic measur defens better perform stock implement address challeng general notion protect function protect interv interv execut start call fix time fix time split execut tls protocol protect interv boundari defin transit tls state machin low level socket read write oper achiev insert call fix time fix time start state tls state machin implement modifi low level socket read socket write openssl wrapper function current interv communic socket start interv divid cryptograph oper perform insid tls implement protect interv interv uniqu identifi current tls state concaten integ increment time interv start tls state equival number socket oper occur state advantag strategi prior defens protect entir implement tls state machin form time attack protect scheme incur addit overhead protect part protocol vulner time attack work secret data evalu perform fulli protect tls state machin well implement protect public key sign oper ble iii observ overhead connect latenc protect full tls protocol protect sensit data structur measur head appli approach protect lookup oper stl unordered_map experi popul hash map bit integ key valu assum attack insert element hash map collis averag cost perform lookup key map defens defens appli overhead caus fact worst case execut time lookup oper larger connect latenc rsa tail stock openssl stock openssl solut sign stock openssl solut connect latenc ecdsa tail stock openssl stock openssl solut sign stock openssl solut tabl iii impact tls connect latenc appli ing defens openssl server side tls implement evalu case server rsa bit ecdsa bit sign key sha digest function latenc millisecond measur connect time client unmodifi openssl librari attempt evalu defens protect sign oper protect server side routin perform tls connect protocol cryptographi full tls protocol protect approach add overhead averag connect latenc bold text indic measur defens better perform stock implement averag case profil worst case execut time lookup interrupt occur time channel defens will lookup worst case execut estim lookup oper increas interrupt case exclud scheme benefit adapt interrupt pad exampl major overhead solut random step ensur safe pad describ earlier random step crucial ensur time leakag hardwar portabl solut specif hardwar will work hardwar support standard cach hierarchi color plement test portabl solut execut benchmark mention section ghz intel xeon cpu confirm solut protect local remot time attack platform relat perform overhead report vii limit system call insid protect function current prototyp support protect function invok system call system call inadvert leak attack leav state share kernel data structur attack indirect observ invok system call time durat altern system call access region cach snoop attack process lack system call support turn big issu practic experi indic system call rare function deal sensit data cryptograph oper need futur support system call insid protect function avoid leakag appli solut kernel exampl pad system call modifi share kernel data structur worst case execut time indirect time variat unprotect code proach current defend time variat execut sensit code segment indirect protect execut exampl consid case sensit function process schedul processor core process user finish execut protect function case solut will flush state core resourc cach process belong user remnant cach state time sensit function attack observ variat infer protect function note current attack exploit kind leakag conserv approach prevent leakag flush cpu resourc protect function will cours result higher perform overhead cost associ cleans type cpu resourc summar tabl leakag fault inject attack process crash middl protect execut attack learn secret exampl consid protect function perform sensit oper pars input user attack learn durat sensit oper provid bad input parser crash measur long take victim process crash solut current form protect attack fundament limit simpl overcom attack modifi appli time pad protect function crash cleanup handler implement modifi track process execut protect function point time respect pad paramet protect function crash cleanup handler correspond process appli desir amount pad viii work defens remot time attack remot time attack exploit input depend exe cution time cryptograph oper three main approach cryptograph oper execut time independ input static transform applic specif chang dynam pad applic specif chang conceptu simpl defend applic time attack modifi sensit oper time behavior key depend exampl implement modifi ensur execut time key independ note cach behavior impact run time achiev secret independ time quir rewrit oper memori access pattern independ secret modif applica tion specif hard design brittl contrast solut complet independ applic program languag static transform altern approach prevent remot attack static transform impl mentat cryptograph oper constant time static analyz find longest path cryptograph oper insert pad instruct side effect nop path amount time longest path approach generic appli sensit oper drawback modern architectur execut time instruct integ divid instruct multipl float point instruct depend input instruct extrem hard time consum static estim execut time instruct hard static predict chang execut time intern cach collis implement cryptograph oper avoid case solut dynam offlin profil estim worst case runtim protect function dynam techniqu suffer incomplet worst case execut time trigger patholog input dynam pad dynam pad techniqu add vari amount pad sensit comput depend observ execut time comput order mitig time side channel prior work present way pad execut black box comput predetermin threshold bound leakag zhang design program languag write sensit oper enforc limit time leak age major drawback exist dynam pad scheme incur larg perform overhead fact estim worst case execut time tend over pessimist depend extern paramet schedul cach behavior simultan run program exampl zhang set worst case execut time second protect wiki server over pessimist estim increas amount requir pad perform overhead macro benchmark exist dynam pad scheme solut incur minim perform overhead protect local remot time attack defens local attack local attack perform time attack defens provid prior defend local attack local attack access share hardwar resourc target sensit oper local attack access fine grain timer common local attack vector probe share hardwar resourc fine grain timer measur long probe propos defens attack remov access fine grain timer isol access share hardwar resourc defens minim leakag obfusc sensit hardwar access pattern describ approach detail remov fine grain timer prior project evalu remov modifi time measur target machin solut effect prevent larg number local side channel attack under state share hardwar resourc read accur measur time perform oper read cach remov access wall clock time suffi cient protect local attack exampl local attack execut multipl probe thread infer time measur observ schedul behavior thread custom schedul scheme instruct base schedul elimin attack implement defens requir major chang schedul contrast solut requir minor chang schedul protect local remot attack prevent share hardwar state process propos defens local attack prevent attack observ state chang share hardwar resourc caus victim process divid propos defens categori describ resourc partit partit share hardwar resourc defeat local attack access partit resourc victim kim effici manag scheme prevent local time attack virtual machin vms techniqu lock memori region access sensit function reserv portion cach scheme effici color protect scheme compl mentari techniqu exampl solut modifi mechan color dynam partit cach resourc partit scheme ristenpart alloc dedic hardwar virtual machin instanc prevent cross attack scheme wast hardwar resourc decreas amount resourc concurr process contrast solut util share hard ware resourc effici isol execut protect function time process spend execut protect function smaller time spend sensit comput limit concurr access gang schedul hyperthread disabl attack observ cpu resourc preempt victim reduc frequenc preemption reduc feasibl cach attack cpu cach varadarajan propos minimum runtim guarante ensur preempt frequent scheme hard implement schedul hypervisor schedul schedul deal unbound number process custom hardwar custom hardwar obfusc random victim usag hardwar exampl wang propos way design cach ensur cach usag share process scheme limit practic usag design deploy shelf commod hardwar flush state class defens ensur state cpu hardwar resourc clear tran fer process ppel zhang flush cpu option cach period multi tenant set solut requir hyperthread disabl report overhead regular workload essenc scheme techniqu flush cpu resourc schedul ppel flush state lazili context switch user process execut protect oper occur ppel protect local cach attack protect local remot time cach attack incur overhead ppel applic transform sensit oper sensi tive comput program modifi exhibit secret independ obfusc hardwar access pattern access hardwar independ secret attack state leak share hardwar learn meaning sensit oper prior project modifi implement obfusc cach access pattern version openssl modifi implement rsa ensur secret independ cach access transform appli dynam exampl crane implement system dynam appli cach access obfusc transform applic runtim transform specif cryptograph oper hard implement maintain correct exampl line assembl code openssl implement rsa cach access secret independ conclus present low overhead cross architectur defens protect applic local remot time attack minim applic code chang exper iment evalu defens work applic written program languag solut defend local remot attack combin main techniqu time pad scheme take secret depend time vari ation account prevent leakag share resourc cach branch predict buffer demonstr appli small time pad curat trivial time loop leak develop method small time pad appli secur hope work will motiv applic develop leverag techniqu protect applic wide varieti time attack expect under principl solut will futur work protect form side channel attack acknowledg work support nsf darpa onr googl phd fellowship suman jana opinion find conclus recommend express materi author reflect view darpa refer aciic mez microarchitectur attack exploit ing cach csaw aciic mez koc seifert power simpl branch predict analysi asiacc aciic mez koc seifert predict secret key branch predict rsa aciic mez seifert cheap hardwar parallel impli cheap secur fdtc andrysco kohlbrenn moweri jhala lerner shacham subnorm float point abnorm time askarov zhang myer predict black box mitig time channel ccs barth betart campo luna pichardi system level interfer constant time cryptographi ccs bernstein chacha variant http bernstein cach time attack blo mer guajardo krummel provabl secur mask select area cryptographi bonneau mironov cach collis time attack ches bortz boneh expos privat time web applic brickel graunk neve seifert softwar mitig hedg cach base softwar side channel vulner iacr cryptolog eprint archiv brumley tuver remot time attack practic esor brumley boneh remot time attack practic usenix secur chung diaconi graham random walk aris random number generat annal probabl cleemput coppen sutter compil mitig time attack modern processor taco cock murray heiser mile empir studi time channel ccs colin puaut worst case execut time analysi processor branch predict real time system coppen verbauwhed bosscher sutter practic mitig time base side channel attack modern processor crane homescu brunthal larsen franz thwart cach side channel attack dynam softwar divers crosbi wallach denial servic algorithm complex attack usenix secur volum gullasch bangert krenn cach game bring access base cach attack practic haeberlen pierc narayan differenti privaci fire usenix secur symposium heckmann ferdinand worst case execut time predict static program analysi ipdp irazoqui eisenbarth sunar jackpot steal larg cach huge cryptolog eprint archiv report http sper schwabe faster time attack resist gcm ches kim peinado mainar ruiz stealthmem system level protect cach base side channel attack cloud usenix secur symposium kocher time attack implement diffi hellman rsa dss system crypto nighof fast cach time resist implement rsa kopf durmuth provabl secur effici countermeasur time attack csf langley lucki thirteen attack tls cbc gao reiter mitig access driven time channel cloud stopwatch dsn martin demm sethumadhavan timewarp think timekeep perform monitor mechan mitig side channel attack isca osvik shamir tromer cach attack countermeasur case rsa perciv cach miss fun profit ristenpart tromer shacham savag hey cloud explor leakag third parti comput cloud ccs stefan buira yang levi terei russo mazi res elimin cach base time attack instruct base schedul esor suzaki iijima yagi artho memori dedupli cation threat guest proceed fourth european workshop system secur acm tromer osvik shamir effici cach attack countermeasur journal cryptolog varadarajan ristenpart swift schedul base defens cross side channel usenix secur vattikonda das shacham elimin fine grain timer xen ccsw wang lee cach design thwart softwar cach base side channel attack isca wang lee novel cach architectur enhanc perform secur micro yarom benger recov openssl ecdsa nonc flush reload cach side channel attack iacr cryptolog eprint archiv yarom falkner flush reload high resolut low nois cach side channel attack usenix secu riti zhang askarov myer predict mitig time channel interact system ccs zhang askarov myer languag base control mitig time channel pldi zhang juel reiter ristenpart cross side channel extract privat key ccs zhang reiter ppel retrofit commod oper system mitig cach side channel cloud ccs 