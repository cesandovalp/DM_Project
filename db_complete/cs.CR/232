ropocop dynam mitig code reus attack andrea follner eric bodden secur softwar engin group spride technisch universita darmstadt bodden abstract control flow attack achiev exploit buffer overflow vulner serious threat system secur fifteen year research answer threat mitig techniqu nev ertheless exploit bypass technolog appear regular basi paper propos ropocop novel approach detect prevent ing execut inject code mitig code reus attack return orient program rop ropocop dynam binari instrumenta tion requir access sourc code debug symbol chang oper system mitig attack monitor program counter danger point detect suspici program flow implement ropocop window pin dynam program instrument framework intel benchmark spec suit averag overhead compar proach weaker guarante real applic initi notic input lag stutter evalu tool detect latest real code reus exploit fals alarm despit overhead viabl temporari solut secur criti cal system exploit vendor patch introduct attack aim manipul control flow buffer flow vulner biggest threat softwar written unsaf lan guag exploit control flow attack allow adversari execut arbitrari code earli oper system develop start mitig techniqu softwar day techniqu regular basi success reliabl ploitat difficult bypass contest continu current mitig techniqu insuffici protect applic comprehens method requir current attack techniqu essenti virtual exploit rop inject code attack piec short code fragment exist memori propos solut attack built cfi effect bypass elabor issu detail battl current exploit mechan propos ropocop novel tool mitig control flow attack window binari novel techniqu anticra dep anticra great reduc risk success code reus tack detect unusu high rate success indirect branch execut unusu short basic block program exhibit dif ferent behaviour aspect threshold program suboptim ropocop learn mode run ahead time determin appropri threshold adopt user provid default threshold work well practic larg select program evalu second contribut dep implement variant execut stack dynam binari instrument dep assum code resid imag dep dep disabl api call elimin larg class exploit base call dep enforc memori execut part imag load dep monitor load unload imag check indirect branch program counter point imag implement ropocop window pin freeli dynam program instrument framework intel ropocop requir access sourc code root privileg debug symbol chang oper sys tem measur artifici spec suit averag overhead import experi real applic ini tialli notic input lag caus initi dynam instrument stutter evalu latest code reus exploit tool success fulli prevent code inject attack code reus attack succeed high sophist attack reli sole code reus envis usag ropocop defens exploit critic system sever vulner discov patch summar work origin contribut anticra tunabl heurist detect code reus attack rop jop dep compar fast robust implement execut stack ropocop dynam instrument tool base pin detect kind control flow attack techniqu empir evalu show mitig approach high fectiv toler runtim overhead ropocop onlin open sourc experiment data https site ropocopresearch current situat exploit vulner goal manipul program flow trivial window earli microsoft began adapt mitig techniqu simplest case attack stack smash attack leverag unbound function strcpi write alloc memori buffer attack overwrit store return address stack address point inject code program will execut return defend code inject attack microsoft implement data execu tion prevent dep execut bit dep mark data execut caus hardwar level except execut attempt prevent attack attempt execut inject code attack bypass dep way techniqu call return orient program util rop tacker inject code exist code fragment gadget return instruct inject code tacker inject address gadget execut return work pop address stack regist eip jump address stack mark execut craft stack fill sequenc gadget address attack execut sequenc gadget return struction gadget transfer program flow gadget jump orient program jop base basic concept rop jmp instruct transfer control flow gadget refer rop jop attack code reus attack success code reus attack depend avail gadget target platform complex code attack practic system vulner code reus attack rop attack complex stage attack kind resort pure rop implement stage approach stage rop call window api function virtualprotect mark memori region execut effect bypass dep second stage run code inject memori region execut normal code reus attack work reliabl memori layout applic high determinist attack hard code address gadget direct exploit mitig microsoft introduc random form aslr aslr random order imag load virtual address space add pseudo random offset base address difficult attack predict memori locat requir gadget target system dep weak program protect dep depend compil set nx_compat flag header main execut flag left unset number reason includ unsaf compil default program compat opt natur dep render benefit void dep program mean link librari dep disabl static dynam will dep disabl entir process enabl attack bypass dis cuss code reus attack attack succeed run code execut dep protect men tion stage attack worth explain detail allow ject code effect bypass dep attack work window expos function chang permiss virtualprotect alloc specif permiss virtualalloc pass paramet api exist program generat code runtim requir memori writeabl execut program haviour discourag microsoft produc softwar adapt program compat dep aslr weak dep aslr enabl depend flag dynamic_bas dep local specif modul oper system handl process compos mixtur aslr enabl disabl imag simpli imag will rebas will apart legaci librari compil aslr exist librari support aslr part program hard code jump address librari bypass aslr appear difficult practic current generic attack work shacham reli brute forc work vulner applic crash access violat occur partial overwrit overwrit byte address stack byte random attack requir knowledg random introduc aslr attack rang byte instruct durden present leak gather informa tion memori layout aslr protect applic hund propos time base side channel attack break kernel space aslr minut attack hardwar attack system current exploit techniqu reli presenc aslr imag target platform imag common current system attack succeed attack model assum strong attack bypass dep aslr mitig techniqu current window determin attack realist assumpt step allow pure rop jop attack call virtualprotect virtualalloc call malici code direct pure code reus attack rare wild expect increas work detect stage attack exampl pure rop attack adob reader anticra design anticra analyz rop jop exploit under principl exploit share properti unusu typic normal execut base observ built heurist monitor properti indirect branch code reus attack consist gadget indi rect branch analyz benchmark well real applic adob reader vlc microsoft offic open offic total program complet list websit high number consecut direct branch unusu highest number subsequ indirect branch experi microsoft word program execut subsequ indirect branch averag length basic block reduc side effect regist stack flag exploit develop gadget short contemporari approach gadget consid basic block instruct indirect branch analyz program behaviour legiti mate program averag number instruct slide window basic block drop interest correl tween previous properti consecut indirect branch longer correspond basic block knowledg paragraph find default paramet work wide set applic mention program exhibit vari characterist regard ing properti ropocop run learn mode requir user simpli program protect usual background ropocop observ program flow determin appropri thresh old properti cours lead limit coverag approach high coverag requir exploit buffer overflow requir sort input general provid attack file open victim process vulner program user work program cover case lead exploit sampl set chose applic common corpor person environ ment express earlier recommend set individu threshold program time wonder provid fault valu cover program analyz test set benign applic run learn mode program sam ple set open media file vlc open pdf file adob reader work microsoft word set threshold subsequ indirect branch averag basic block length lower describ earlier correl larger number subsequ basic block longer basic block threshold till sequent indirect branch averag basic block length lower anticra signal exploit attempt bound violat point subsequ indirect branch execut sampl set benign applic larg claim these suggest threshold hold program hold program set includ exploit applic serv excel start point fine tune requir includ program ten exploit busi environ word excel adob reader ropocop deploy fine tune threshold increas perform algorithm prone fals posit calcu late averag start collect basic block length comput averag subsequ indirect branch prevent fals alarm base short sequenc short basic block sampl size wise figur threshold form shade area dimension plain execut fall shade area anticra will signal malici figur summar empir evalu will explain detail impact current futur exploit code reus attack circumv anticra con secut indirect branch depend avail gadget vari program base librari load aslr employ averag number instruct gad fall combin restrict difficult attack creat pure rop jop payload attack attempt rais averag number instruct gadget insert longer gadget longer gadget unwant side effect manipul regist hold data stack modifi flag total number gadget limit insert long gadget side effect irrelev sake increas averag wast precious slot gadget bypass anticra attack insert direct branch limit avail side effect trivial particu lar gadget compil support direct branch point depend program mention goal break current exploit develop code reus exploit difficult anticra achiev long nop gadget propos davi artifici increas averag basic block length take gadget restor stack regist origin form precious space wast attempt will exceed sensibl threshold author state find gadget trivial task requir painstak analys stroke luck program techniqu limit heurist natur fals posit well fals negat work practic heurist effect fals decis benchmark set circum stanc favor attack creat stage exploit disabl dep fewer gadget run regular payload detect anticra motiv reliabl execut data section enforc dep dep dep base concept dep premis data execut dep monitor load unload imag creat virtual memori map base virtual memori space imag map consid hold malici data window alloc stack heap area enforc instruct regist eip point imag dep check regist indirect branch return indirect call indirect jump oppos dep dep disabl api call virtualprotect implement detail img_addinstrumentfunct well img_addunloadfunct monitor load unload imag imag load dep store start address array struct imag unload runtim remov array data structur virtual memori map distinguish imag imag code data region dep treat space malici data allow eip point dep check instruct basic block indirect branch check target address branch point insid data region program load librari process equal high number code region check region indirect branch incur perform penalti increas formanc fact window memori manag rela tive determinist imag general tend load high address higher stack heap low address alloc increas higher address depend memori usag process general valid assum stack heap resid imag dep knowledg check region check eip indirect branch dep monitor memori usag dynam increas decreas number region account plement probe memori usag time function alloc alloc memori call multipli report usag larg safeti margin cours heurist trade secur perfor manc evalu heurist help dep bring check minimum recogn test attack experi benchmark real program memori allo cation small step probe memori usag short interv safeti margin fail correct detect number region check heurist fail exploit memori alloc current memori usag vulner function memori instruct redirect program flow memori algorithm check memori usag attack influenc precondit accept risk heurist fail rare condit reliabl exploit circumst multi thread program difficult high determinist natur comparison dep origin shortcom dep enabl bypass pure code reus attack code reus attack invok virtualprotect disabl dep dep improv dep prevent execut inject code enforc execut data region process regular dep disabl dep bypass call virtualprotect sibl call dep result achiev hook function simpli execut userland hook bypass easili kernel hook requir admin istrat privileg deploy solut complic overhead introduc dep neglig limit process reli abil execut code imag process generat code runtim incorpor modifi code compati ble dep process compat dep virtualprotect api disabl dep memori region generat code difficult detect call api abus bypass dep attack legitim origin program decid support call strong increas secur drawback reduc compat older softwar dep dep detect prevent exploit vulnerabil iti overwrit data stack buffer overflow control data attack leakag dep prevent pure code reus attack motiv anticra tion evalu implement high modular deploy anticra dep ind pendent well combin run increas secur fashion run dep aslr chapter evalu anticra dep address question effect anticra detect pure code reus payload effect anticra detect stage rop payload effect dep detect code inject attack perform overhead anticra dep evalu anticra evalu look pure code reus attack point payload rare wild academia proof concept real pure code reus exploit rop exploit adob reader sourc code infect file public conclus base analysi szor analyz sourc code reveal address repeat time instruct address simpl ret equal indirect branch row cours detect anticra reason pure rop jop payload rare practic stage payload aim disabl dep rop jop simpler construct suffici case payload mitig dep interest evalu extent anticra dep mitig attack well analyz real exploit total oper unbias test set alyz exploit http claim bypass aslr mention pure rop exploit figur analysi number consecut indirect branch averag basic block length exploit legitim program number indic legitim program rare consecut indirect branch averag basic block length higher exploit con firm general threshhold work wide varieti program well suit detect attack anticra detect exploit sampl set case number indirect branch row three exploit detect short gadget execut instruct transfer program execut gadget exploit trigger mechan indirect branch row short gadget exploit detect anticra requir gadget prepar stack call virtualprotect trigger indirect branch check averag length basic block trigger alarm explain trigger inspect total indirect branch row point stage exploit anticra miss detect dep anticra design catch pure rop jop attack necessar ili stage attack examin evalu mind threshold adjust program evalu well general threshold hold despit detect exploit analysi pure rop exploit adob reader confid exploit reli sole rop jop detect anticra threshold length threshold ind branch indirect branch row spec exploit applic fig analysi number indirect branch row lowest averag basic block length test set evalu dep test dep wrote small vulner applic unbound strcpi compil nx_compat simpl exploit code inject attack store inject code insid buffer definit imag program vulner consequ differ vulner applic real applic miti gation techniqu place irrelev assum attack bypass program flow transfer inject code irrelev evalu well ultim code injec tion attack call inject code dep detect evalu dep written program pose real threat valid experi expect dep correct detect target address ret instruct vulner function imag instruct execut termin program miti gate attack led arbitrari code execut real exploit dep detect pure rop exploit adob reader eventu execut code memori imag perform evalu perform ropocop benchmark spec benchmark suit note worst case benchmark exercis dynam analysi heavili interact network base applic lower overhead measur runtim benchmark nativ runtim pin runtim pin attach instrument basic head pin introduc runtim anticra runtim dep runtim anticra dep benchmark window intel core duo clock ghz ram refer workload figur summar perform benchmark run program pin instrument introduc averag program averag time finish rang lbm program protect anticra averag total overhead dep enabl well ropocop introduc averag overhead compar tool ropdefend weaker guarante compar cfi approach ropocop consid abli higher overhead monitor process lifetim danger point determin accur rop attack carri spec benchmark tim nativ pin pin anticra pin anticra dep fig perform ropocop overhead order fold sound unaccept overhead expect worst case situat perform bench mark spec advantag produc reproduc produc reflect realiti ultim count perform real applic perform measur systemat report qualit applic sampl set general observ averag overhead comput geometr consid best prac tice report normal valu percentag overhead case gui slight input lag second open menu time open instant file transfer filezilla slower tool vlc play encod video jitter adob reader render notic lag type microsoft word input lag emphas ropocop intend applic time recommend usag enabl critic system applic vulner activ exploit vendor patch releas circumst overhead opinion accept work truss ropdefend store copi return address runtim shadow stack function call copi push return address store shadow stack return procedur return address stack compar shadow stack truss implement dynamorio ropdefend pin dynamorio runtim instrument tool work pin truss ropdefend reli attack overwrit return address stack strict requir class attack jop assum function call call exit ret ropdefend handl except nei ther handl hand craft assembl code follow convent overhead tool kbouncer branch record lbr featur modern cpus kbouncer assum point shellcod invok system call occur lbr repositori check distinct properti rop behaviour consecut indirect jump short basic block tool averag overhead implement window fulli function window allow intercept system call requir kbouncer deploy system cpu lbr ropeck lbr featur modern cpus ropocop check consecut short indirect branch rais alert thresh undercut increas perform detect heurist invok branch target call slide window collect circumst ropeck low overhead spec benchmark suit rop gadget slide window requir cpu support lbr featur control flow integr static analysi binari creat control flow graph rewrit binari enforc deviat pre comput path implement base vulcan commerci dynam instrument tool binari averag overhead ccfir enforc control flow integr ensur target indirect jump legal valid target identifi ahead time static analys nari analysi work proper requir binari aslr dep ccfir runtim overhead ktas mention cfi approach bypass inher problem approach check allow attack access gadget limit number slot lbr improv secur approach attempt detect rop exploit measur properti make threshold dynam conclus work present ropocop novel tool autom dynam recog nition buffer overflow attack ropocop design recogn class code reus attack base novel techniqu anticra dep anticra configur heurist base number indirect branch execut row well averag basic block length execut code experi ing default threshold work varieti program anticra detect latest real code reus exploit yield fals alarm spec test real applic total program dep exe cute execut stack binari instrument detect exploit base stage payload code reus attack disabl dep window api dep detect stage payload examin fals alarm combin techniqu ropocop detect test exploit fals warn show averag formanc overhead spec real applic show initi notic input lag stutter ropocop run user mode requir ing access sourc code debug symbol chang oper system support multi thread applic heurist natur ropocop absolut secur guarante paramet heurist base hard circumv approach practic ropocop rais bar cost compar previous approach acknowledg work support german feder ministri educ bmbf spride hessian loew excel initi case refer abadi budiu erlingsson ligatti control flow integr principl impl mentat applic acm tran inf syst secur nov andersen abella chang function window servic pack memori protect technolog aug bletsch jiang freeh liang jump orient program class code reus attack asiacc acm bubina buffer overflow top softwar secur vulner year mar butler anonym bypass parti window buffer overflow protect phrack checkoway davi dmitrienko sadeghi shacham winandi return orient program return ccs acm chen sezer gauriar iyer control data attack realist threat ssym usenix associ cheng zhou ding deng ropeck generic practic approach defend rop attack davi sadeghi lehmann monros stitch gadget inef fectiv coars grain control flow integr protect proc usenix conf secur usenix associ davi sadeghi winandi ropdefend detect tool defend return orient program attack asiacc acm durden bypass pax aslr protect phrack fleme wallac lie statist correct summar benchmark commun acm mar ktas athanasopoulo polychronaki bos portokalidi size matter gadget chain length prevent code reus attack hard proc usenix conf secur symposium usenix associ gunn recap howard miller lambert thomlinson window isv softwar secur defens dec hund willem holz practic time side channel attack kernel space aslr ieee comput societi szor emerg stack pivot exploit bypass common secur luk cohn muth patil klauser lowney wallac reddi hazelwood pin build custom program analysi tool dynam instrumenta tion pldi acm microsoft data execut prevent min jung lee chung jump orient program win dow platform volum lectur note comput scienc springer smash stack fun profit phrack pappa polychronaki keromyti transpar rop exploit mitig indirect branch trace usenix associ roemer buchanan shacham savag return orient program sys tem languag applic acm tran inf syst secur mar shacham geometri innoc flesh bone return libc function call ccs acm shacham pfaff goh modadugu boneh effect address space random ccs acm sinnadurai zhao fai wong transpar runtim shadow stack protect malici return address modif zhang wei chen duan szeker mccamant song zou practic control flow integr random binari execut ieee comput societi zhang sekar control flow integr cot binari proc usenix conf secur usenix associ 