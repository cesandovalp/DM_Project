instant obsolet address code associ principl defend advanc code reus attack ping chen jun jun wang peng liu colleg scienc technolog pennsylvania state univers pliu jun psu fine grain address space random consid effect protect code reus attack rop jop employ time random limit exploit time rop side channel rop collect gadget fli dynam compil malici purpos defeat advanc code reus attack propos defens principl instant obsolet address code associ initi principl novel techniqu call virtual space tabl remap implement techniqu system chameleon chameleon period random locat code fli set tech niqu propos achiev goal includ iter instrument instrument protect binari program generat random compat binari runtim virtual shuffl function reorder instruct rearrang optim test chameleon binari program experi chameleon defeat test exploit prevent exploit gather suffici gadget block gadget execut interv random paramet set short experi chameleon introduc averag perform overhead paramet introduct code reus attack return orient program rop exploit vulner commerci softwar internet explor adob reader rop attack hijack program control flow execut code snippet gadget elabor select share librari applic code inject code rop easili bypass data execut prevent dep major line defeat rop control flow integr cfi address space random asr effort asr push random fine grain defend advanc rop attack emerg trend attack communiti rop attack launch memori disclosur attack type punch rop attack real punch rop type time rop jit rop memori disclosur attack side channel attack combin tradit rop attack form type punch rop attack call rop punch rop attack circumv advanc asr techniqu includ fine grain asr explain punch rop attack hard defend short introduct attack jit rop attack exploit memori disclosur vulner memori disassem bling initi attack aim find local gadget local gadget insuffici attack will find locat analyz current exploit memori disclosur vulner scan newli identifi gadget note attack continu scan current avoid caus problem segment fault final attack compil start address identifi gadget data gadget will malici payload rop attack collect gadget fli jit rop attack exploit vulner buffer overflow rop attack redirect execut specif locat execut behavior redirect enabl attack infer instruct execut behavior includ execut status crash hang execut program output execut time iter chang redirect locat infer execut instruct attack understand valid instruct locat instruct notic type punch rop attack share common featur identifi address code associ fli process address instruct form address code associ resid logic address exist asr techniqu random address code associ time execut load time strategi random map code layout binari disk code layout memori rais bar tradit rop attack reli map punch rop attack identifi address code associ execut time requir knowledg map lead fact punch rop attack bypass exist asr fine grain asr techniqu make random granular finer finer effect principl chang fact asr techniqu defeat punch rop attack fundament principl requir paper propos defens principl address code associ obsolet implic principl implic address code associ punch rop attack obsolet rop shellcod execut implic legitim binari valid address code associ matter frequent associ chang principl inspir weak punch rop attack attack unavoid time window achiev goal time window consist part time attack take identifi address code associ time attack take construct malici payload second address code associ construct payload valid execut rop payload execut direct payload instruct resid address intend rop payload execut weak impli properti asr techniqu enforc principl asr techniqu obsolet address code associ determin unavoid time window second punch rop attack guarante fail asr deploy reason implic principl take advantag second weak punch rop attack best knowledg exist asr techniqu enforc principl paper propos novel asr techniqu virtual address tabl remap vaptr enforc principl vaptr period random locat code fli essenti address code associ obsolet round random experi vaptr obsolet cycl quicker unavoid time window punch rop attack develop system name implement vaptr techniqu overview chameleon system present main contribut work propos fundament defens principl asr techniqu defeat punch rop attack enforc principl asr techniqu guarante invinc punch rop attack propos novel vaptr techniqu enforc defens principl techniqu involv type binari instrument develop chameleon system implement vaptr techniqu experiment binari program chameleon defeat punch rop attack low overhead instanc httpd lighttpd nginx set random interv system overview threat model threat model assum program run linux oper system dep aslr enabl victim program memori corrupt vulner attack aim exploit vulner execut arbitrari malici logic rop attack assum access execut sourc code program control major input channel process includ standard input file stream network traffic identifi address code associ runtim memori disclosur attack side channel attack find suffici instruct gadget attack gain root privileg access kernel addit attack unavoid time window identifi address code associ construct payload stand chang memori layout period fli layout random cycl logic code layout random cycl logic code mov eax ebx ret valid gadget total irrelev instruct figur high level idea vaptr approach overview high level vaptr techniqu period random map logic number physic number code physic address space unchang shuffl code logic address space cycl random present figur layout logic address space cycl cycl left note code insid physic will move physic dot arrow left code unchang logic address code chang logic address code chang insid logic insid third logic random cycl shorter unavoid time window vaptr defens principl guarante defeat threat model implement vaptr techniqu enforc principl problem resolv problem solut generat random map technic random map generat user space kernel space process generat user space lead attack surfac random map maintain user space attack launch memori disclosur attack bypass defens second map generat code resid user space attack reus generat learn random logic perform random choos generat random map kernel space generat random map main option modifi tabl find avoid crash program second modifi tabl find period modifi logic address program choos option propos novel avoid crash program random cycl modifi tabl random generat biject logic number physic number avoid crash program solut paragraph maintain normal execut program instrument program code virtual address tabl remap call foo pop eax origin binari tabl user kernel user stack load instrument binari offset tabl control flow data flow vaptr chameleon stub offset popa popf ret static binari instrument kernel thread kth_jit random random logic physic esp foo push ebp pushf pushf pushf pusha mov eax mov ebx mov ecx call pop eax foo push ebp system call sys_jit chameleon stub entri address eax ebx edi eflag figur overview chameleon tabl modifi program will primari issu instrument code arbitrari tabl modif accommod address issu novel add layer indirect program code tabl layer indirect implement second tabl kernel space logic logic map tabl tabl code logic number cycl random defin random logic number logic number call random logic number note random logic number chang time tabl record map random logic number random logic number tabl tabl will form step map random logic number map correct physic number step map tabl play critic role solut hand enabl tabl modifi arbitrari hand enabl program instrument unifi remain issu instrument program tabl approach static rewrit binari execut rewrit specif type instruct classifi instruct type inter instruct intra instruct inter instruct refer control flow transfer instruct target address current code paper regard control flow transfer instruct set direct jump indirect jump condit jump direct call indirect call ret instruct inter instruct classifi intra instruct instrument program code kernel intercept instruct enforc execut instruct fault except rewrit replac inter instruct custom system design vaptr enforc target address inter instruct random detail system call will tabl translat number random target address intra instruct unchang guarante execut will wrong refer defeat attack suppos attack select launch jit rop attack attack attack gadget address memori disclosur attack address rop payload total attack spend gadget construct payload payload execut will translat tabl tabl random will translat irrelev physic address execut rop payload situat defend rop attack attack extend jit rop attack reus system call handl extend attack will discuss chameleon architectur overview develop chameleon implement vaptr techniqu chameleon consist compon static binari rewrit kernel space vaptr unit protect binari program rewrit instrument binari compat vaptr rewrit will replac inter instruct system call sys_jit runtim instrument program will invok system call tabl address translat kernel space vaptr unit consist three compon kernel thread kth_jit tabl custom system call sys_jit kth_jit period random tabl updat tabl correspond instrument program tabl address translat will invok sys_jit sys_jit queri tabl translat address transfer execut user space work exampl demonstr chameleon exact work work exampl figur static binari rewrit generat random suitabl binari rsb exampl origin binari invok call inter instruct instruct call function foo static binari rewrit replac call instruct instruct call sys_jit detail instruct explain execut rsb sys_jit will invok foo call random logic target address pass argument sys_jit sys_jit split part number offset sys_jit number tabl random number offset sys_jit random address addit sys_jit will translat return address random logic address write reserv space current stack frame reason recoveri explain final sys_jit transfer execut random address detail refer altern system call long trap kernel design implement design implement chameleon system work process system design static binari rewrit explain design vaptr unit work instrument binari static binari rewrit goal rewrit instrument normal binari program compat vaptr describ design rewrit achiev compat explain detail instrument process rewrit second summar challeng face address instrument process third optim improv perform instrument binari instrument process type instruct rewrit take instrument action design chameleon random map code chameleon random current code instruct execut will continu random execut instrument intra instruct explain instrument intra instruct execut wrong suppos instruct execut sequenti code intra instruct vaptr logic address code map fix physic address distanc physic address equal distanc logic address natur maintain normal execut inter instruct rewrit replac rsi unit rsi unit set custom instruct prepar argument sys_jit invok sys_jit detail present addit rewrit insert rsi unit code move instruct posit occupi unit build rewrit top dyninst dyninst help identifi inter instruct face challeng regist conflict regist neighbor instruct instrument point rsi unit explain handl regist conflict memori expans insert rsi unit will chang code layout result memori expans memori expans situat intra instruct push instruct control flow transfer instruct inter instruct second inter instruct chang intra instruct push explain handl memori expans posit independ code sys_jit work special invok posit independ code pic instrument pic rewrit set flag argument sys_jit special indic sys_jit call pic dynam librari vaptr will special approach handl pic code callback function callback function instrument program instrument code kernel instrument code will random address callback function handl issu identifi signal handler callback function explicit regist function atexit separ entri bodi callback function entri callback function move random bodi random place rsi unit entri callback function callback function invok correspond rsi unit will execut redirect control flow bodi callback function rsi unit construct rsi unit accomplish three goal reserv memori space save regist content invok sys_jit system call reserv memori space rsi unit reserv space user stack space will sys_jit pushf space reserv esp flag regist will inter instruct replac rsi unit rsi unit enforc polici space reserv call reserv ret reserv jmp jcc rsi unit code reserv word sys_jit reserv space will illustr save regist content rsi unit save flag regist general purpos regist stack purpos fold recov regist exit sys_jit avoid regist conflict caus rsi unit second sys_jit valu regist address translat save eflga help determin target address replac jcc pushf save eflag regist pusha save general purpos regist invok sys_jit sys_jit take argument random target address replac inter instruct addit flag flag indic type replac instruct call instruct rsi unit three move instruct set system call number argument call invok sys_jit exampl figur call instruct replac instruct reserv stack space pushf store regist state third pushf pusha set system call number mov eax set argument mov ebx mov ecx invok system call call iter instrument address memori expans problem propos approach insert rsi unit control flow transfer instruct includ jcc jmp call ret identifi intra instruct replac rsi unit recov rsi unit origin control flow transfer instruct pad redund space nop instruct iter instrument inter instruct binari program reach point round instrument conduc origin clean binari analysi inter instruct base layout instrument binari previous iter point reach instrument inter instruct current iter ident instrument previous iter method simpl quick instrument strategi unnecessarili add nop intra instruct import strategi support rearrang binari layout prohibit perform extra optim present choos second approach denot iter instrument iter instrument save unnecessari space instrument intra instruct support optim side benefit instrument intend inter instruct replac rsi unit reduc number call ret jmp rop attack increas difficulti rop attack perform optim instrument inter instruct trap kernel space introduc cost context switch reduc number inter instruct good strategi optim perform key observ enabl optim function code span address space function inter instruct target address function denot inter instruct type optimiz inter instruct function code inter target address byte function denot inter instruct type optimiz inter instruct propos optim remov type inter instruct function reorder instruct rearrang function reorder work function byte code type function instruct rearrang work function byte code type function function reorder purpos function reorder move function code singl memori type optimiz inter instruct elimin optim complet step instrument inter instruct iter instrument second follow iter identifi rank type function base code size third move type function lower memori space type function fourth rearrang type function code start code segment prevent type function occupi final rsi unit sequenti execut correct instruct rearrang type optimiz inter instruct type function rearrang instruct insert pad byte nop control pad target address address type optimiz inter instruct type optimiz inter instruct remov virtual address tabl remap goal vaptr compon provid servic mechan perform random period user space process queri tabl redirect control flow target address kth_jit kernel thread design achiev goal sys_jit system call chameleon stub design second goal sys_jit kth_jit execut insid kernel care synchron explain handl posit independ code dynam comput address challeng face final secur eip stack disabl sys_jit secur enhanc strategi design kth_jit kth_jit kernel thread design perform period random oper tabl invok load time binari constant wake perform random shuffl logic number tabl fisher yate shuffl algorithm purpos random sourc kernel function get_random_byt addit shuffl tabl kth_jit alter tabl entri ptes current map exampl logic left column tabl correspond kernel thread will replac pte pte kernel thread repeat oper logic auxiliari tabl tabl random complet kernel function flush_tlb_rang flush tlb simplifi tabl handl current code memori program load time mlock avoid complex will introduc swap design sys_jit chameleon stub illustr work exampl sys_jit determin origin target address origin number tabl number final redirect control flow destin address determin target address decid random address origin random address queri tabl direct call jmp target address explicit binari code direct fetch target address argument sys_jit dynam comput target address load memori regist call jmp ecx will pass time address sys_jit argument case time address random address determin compil loader exampl jump tabl virtual function tabl special case time address random address calcul eip sys_jit receiv address tabl result will incorrect solv problem restor eip random address save user stack detail target address decid runtim inter instruct condit jump determin target address base eflag ecx note instruct jcxz jecxz will jump ecx instrument instruct ret random return address kernel queri tabl sys_jit will queri tabl task random address random target address random address random return address task left column tabl repres number convert logic address number addr page_mask tabl number entri find random number task task system call inquir tabl random number calcul random return address note random target address random return address will save reserv space rsi unit recal redirect control flow chameleon stub redirect control flow target address sys_jit perform restor consid fact restor procedur exact type instrument simpli includ restor procedur insid wrapper function call chameleon stub sys_jit finish execut will modifi save return address top user stack entri address chameleon stub control flow will direct chameleon stub will popa popf restor regist chameleon stub time random resist time code reus attack store separ context restor safe chang control flow random target address rop trick set target address insert jump instruct return chameleon stub insert ret instruct chameleon stub replac return address random target address replac oper achiev insid sys_jit system call figur sys_jit modifi return address current stack frame entri address stub addit sys_jit write random target address reserv space stack sys_jit return execut will redirect stub final stub return random target address store reserv stack space synchron kth_jit sys_jit kth_jit sys_jit access share tabl proper synchron need hand sys_jit share tabl read hand kth_jit random modifi share tabl read write leverag kernel rw_semaphor synchron access tabl system call will call down_read up_read hold releas read lock kernel thread will call down_writ up_writ correspond employ schedule_timeout implement time sleep kernel thread set reset current execut random white list synchron polici need kernel thread will read system call will read write sys_jit kth_jit mutual exclud rw_semaphor prevent multipl system call multithread program concurr modifi white list set reset oper suppos quick choos spinlock worth note singl thread process spinlock elimin improv perform multithread program natur support design thread process share set tabl concurr issu sys_jit system call appropri synchron kernel thread order support multipl process run time process random time correct associ kernel thread process dynam alloc kmalloc tabl process store refer tabl task_struct system call identifi correspond tabl posit independ code chameleon support secur posit independ code pic static instrument phase pic flag argument sys_jit set indic invok code pic librari belong kernel space unit action hook mmap_pgoff kernel space load instrument dynam librari includ current process base address librari librari know start offset offset code segment kth_jit understand start address address librari code librari tabl code __init_d push ebx esp call add ebx lea ebx eax mov esp ebx ret pusha mov ecx mov eax mov ebx call __init_d push ebx pushf pushf pushf pusha mov eax mov ecx mov ebx esp key key bss stack mov esp ebx add ebx lea ebx eax pushf pusha mov ecx mov eax ebx call pushf mov eax ecx mov ebx call pid lib base address load dynam librari sys_jit tabl eax ebx eip shadow tabl user kernel code snippet code snippet load instrument return addrus stack addr figur dynam librari applic random cycl kth_jit updat tabl librari base newest tabl sys_jit invok pic sys_jit check target address pass argument target address base address librari will add base address instruct call figur exampl illustr handl pic static instrument call replac rgi unit flag argument ofsys_jit indic code call instruct load process httpd kernel will record load dynam librari process librari base address runtim sys_jit invok address target address argument sys_jit will load dynam librari add base address target address illustr sys_jit will tabl write random target address reserv space user stack transfer control flow dynam comput address discuss dynam comput address random address random address random address direct tabl queri focus second type dynam comput address reason dynam comput address random save eip user stack address comput bit linux eip direct access instruct way eip will indirect access save stack call instruct save current eip stack return signal handl kernel save eip signal frame sigfram setup_fram store user content sig_return denot address dynam comput save eip stack eip relat address global variabl key figur exampl key bss segment fix offset address key pic code call save return address address add ebx stack mov esp ebx assign tabl statist instrument program program orig_s rsb_size iter_count orig_pag rsb_page pad total rsi byte cft orig unit cat tail sort head expand unexpand past ghttpd httpd nginx lighttpd return address ebx add ebx calcul base address bss segment offset add ebx bss segment final lea ebx eax assign address key eax address key eip relat address load instrument return address random address offset base address bss segment will calcul correct base address note random return address calcul base address will correct result handl eip relat address save eip user stack sys_jit setup_fram hook will save random address work exampl figur exampl sys_jit split return address number offset perform invers queri tabl number random return address case consequ random return address will address reserv stack space save random return address stack figur secur enhanc secur save eip handl eip relat address save random eip stack attack rop attack srop attempt modifi save valu address malici gadget address gadget analyz offlin secur save eip reli kernel space provid protect kernel space chameleon maintain eip shadow tabl kernel space random save eip save locat instanc figur return address save locat store eip shadow tabl sys_jit replac ret sig_return hook restor eip eip shadow tabl eip random address tabl restor eip random address matter save eip stack craft control flow valid base eip save eip shadow tabl kernel space disabl reus sys_jit astut attack interest extend punch rop attack reus sys_jit approach reus sys_jit imposs difficult attack constant identifi locat rsi unit rsi unit activ period random second attack correct locat rsi unit attack fake argument sys_jit target address argument three type target address hard code label return address regist regist involv memori jmp eax dep enabl hard attack craft hard code label code segment difficult reus sys_jit type return address argument design return address maintain kernel imposs modifi attack root privileg imposs attack reus sys_jit second type return address argument reus sys_jit third type return address argument attack modifi regist point gadget address memori gadget address regist modif requir execut specif gadget dispatch gadget execut gadget reus sys_jit explain imposs defens principl enforc vaptr summari easi attack reus sys_jit evalu implement chameleon user level static binari instrument compon implement top dyninstapi librari addit line code kernel compon vaptr sys_jit implement atop linux kernel line code evalu evalu effect chameleon number jit rop attack test perform program protect chameleon experi suit consist program program coreutil toolchain program common compress softwar program web server ghttpd httpd nginx lighttpd test conduct intel duo cpu desktop physic ram effect static binari instrument instrument binari space limit tabl present statist program coreutil criteria select base time program longer time column name program column column size origin binari instrument binari notic averag increas binari file size column report number iter instrument take general iter count depend size binari largest iter count nginx smallest ghttpd column report number code origin binari column report instrument binari rsb code introduc column report size pad insert instrument binari column report number rsi unit insert instrument binari test program insert averag pad byte rsi unit control flow transfer cft instruct origin binari instrument rsi unit compar total number cft instruct origin binari column number rsi unit column cft instruct origin binari tabl secur evalu chameleon program chameleon origin binari chameleon instrument binari memori gadget discoveri gadget memori gadget discoveri gadget disclosur time compil execut disclosur time compil execut time gadget time gadget gadget gadget cat tail sort head expand unexpand past ghttpd httpd nginx lighttpd instrument short will icft inter control flow transfer instruct repres inter instruct defens jit code reus attack attack construct test effect chameleon jit code reus attack construct set jit code exploit origin binari well instrument binari test program desir vulner jit rop evalu techniqu creat share librari link test program simul jit rop attack librari exploit routin will perform memori disclosur gadget collect time gadget compil gadget execut hijack program control flow execut routin share librari direct patch entri address program direct execut attack payload attack construct exploit origin binari instrument binari tabl present experiment result column column statist chameleon column column statist chameleon origin binari program chameleon protect attack ghttpd gadget perform simpl attack open shell complet memori disclosur task time gadget execut short time consum task tabl averag scan averag gadget discov take discov compil gadget select gadget execut complet attack attack instrument binari three random time interv exploit routin fail except reason choos random interv discuss observ failur share common characterist scan matter binari attack attack start elimin icft instruct prevent attack disclos second number discov gadget averag tabl gadget statist program origin binari instrument binari gadget gadget cat tail sort head expand unexpand past ghttpd httpd nginx lighttpd attack start number discov gadget sharpli reduc compar origin binari third test program gadget compil succeed exploit routin fail identifi suffici amount gadget order achiev simpl task open shell final evalu effect time random compil limit number discov gadget gadget execut specif oper data movement execut select gadget complet exploit routin crash find crash gadget execut random note attack side channel base techniqu collect gadget fli general will time exampl fastest exploit brop take minut nginx exploit apach web server take tradit aslr week fine grain aslr protect period chameleon perform random hundr time random interv chameleon will perform time random chameleon capabl defeat side channel attack tabl runtim statist instrument program program command benchmark rsi unit uniqu rsi unit involv cat cat file tail tail line file directori file directori tree copi file sort sort file head head line file file expand expand file past past file unexpand unexpand file compress file compress file ghttpd wget http httpd http nginx http lighttpd http cat tail sort head base expa unex pand bzip ghttp httpd ngin light tpd tim random interv figur runtim overhead worst case analysi simul attack assum attack step jit rop elev potenti extrem case gadget attack compar origin binari instrument binari term total number gadget find rsb gadget tabl compar averag gadget origin binari instrument binari gadget decreas worth mention remain gadget unintend gadget intend gadget remov natur techniqu recal ret instruct origin binari replac runtim overhead measur runtim overhead test program program measur follow runtim statist instrument binari secur loss optim runtim overhead secur loss optim effect optim test program time calcul averag tabl evalu result perform optim program optim optim overhead rsi unit rsi unit execut overhead rsi unit rsi unit executionsexecut execut sort expand unexpand past httpd nginx lighthttpd runtim rsi execut statist tabl runtim statist select program run secur loss optim column specif shell command benchmark runtim overhead rsi unit pad nop sequenc will introduc neglig overhead statist includ total number execut rsi unit column number uniqu rsi unit involv column ghttpd execut smallest number rsi unit execut largest number rsi unit note extrem larg number loop denot rsi unit execut time frequent execut rsi unit decompos frequent execut rsi unit categori tabl exampl number uniqu rsi unit execut time rsi unit expand rsi unit sort rsi unit number frequent execut rsi unit share rsi unit frequent execut rsi unit consum total number execut fact appli secur loss optim present safe remov frequent execut rsi unit runtim overhead binari secur loss optim set test origin program instrument program three random interv set test execut time averag runtim overhead three interv calcul averag runtim overhead binari execut time longer threshold consid binari categori fig runtim overhead measur select program correl tabl runtim overhead heavili correl number execut rsi unit number frequent execut rsi unit higher number runtim overhead will introduc practic notic number execut rsi unit perform overhead neglig instrument execut cat tail head better perform origin binari reason improv memori local achiev instrument note test program coreutil execut rsi unit absolut number rsi unit lower relat time consumpt rsi unit higher addit initi overhead includ creation kth_jit kernel thread tabl greater impact short live program result small command program hostid lognam whoami runtim overhead addit coreutil test three web server program httpd nginx lighttpd apachebench simul http request evalu perform set random interv optim observ execut rsi unit program optim observ execut rsi unit yield reduct consequ figur tabl runtim overhead reduc program dynam librari evalu includ number dynam librari test suit experi instrument librari select instrument evalu perform web server softwar httpd nginx lighttpd note web applic provid https servic repres candid evalu optim perform chameleon instrument inter instruct total control flow instruct instrument web applic link orig inal instrument evalu perform differ set https benchmark https set random interv observ chameleon introduc perform overhead rgi unit execut find rgi unit execut httpd nginx lightttpd effect optim measur effect optim present select program frequent execut rsi unit compar runtim overhead optim random interv tabl repres averag overhead reduc turn program benefit optim overhead reduc perform improv reduct number execut rsi unit collect number execut rsi unit optim reduct uniqu rsi unit gross reduct rate execut rsi unit indic optim reduc frequent execut rsi unit larg extent discuss long random cycl length random cycl critic approach cycl long leav door attack cycl short introduc high overhead hard theoret identifi secur length random cycl attack determin length random cycl mimic jit rop attack program protect detail experi present present tabl shortest time conduct jit rop attack cat note real attack time longer issu network delay vulner exploit provid three option random cycl fact set random interv shorter compat chameleon aslr alsr common defens techniqu built modern linux kernel test chameleon compat aslr experi suit program protect chameleon correct aslr enabl work introduct data execut prevent dep attack execut inject code reus exist code malici purpos decad wit code reus attack evolv return libc rop jop time rop discuss defens attack compar chameleon defens base gadget pattern natur divert control flow execut exist program code code reus attack expos distinct pattern benign program execut instanc short code snippet instruct correspond call ret instruct control flow transfer heavili depend ret instruct light drop detect rop attack base heavi ret control flow transfer ropdefend base match pair call return kbouncer ropeck base length gadget well sequenc consecut gadget effort demonstr pattern base approach broken effort free return propos remov ret instruct block rop attack defens base random attack address divert control flow appeal defens random locat program code address identifi attack will fail larg number random techniqu propos differ granular segment offset level level function level basic block level instruct level random occur compil time load time exist aslr perform time random lead jit rop attack natur respons random program code earli attempt execut path random propos isomeron basic dynam binari instrument isomeron copi origin code copi random code runtim random flip execut origin code random code function granular chameleon share motiv random substanti differ isomeron follow defens principl address code associ execut path random attack hijack control flow execut jit rop attack trigger path execut random function call isomeron dynam binari instrument base suffer high perform overhead chameleon practic static binari instrument number optim techniqu lead perform overhead defens motiv jit code reus attack approach name execut read xnr propos key idea ensur code execut processor read data essenti forfeit disassembl jit code reus attack gadget collect read code data exampl propos brop attack util side channel program crash probe valid gadget read disassembl code advanc side channel attack requir crash applic propos coupl fault analysi time channel allow remot attack learn code diversifi need read code case xnr incompet defeat code reus attack comparison chameleon period random matter gadget collect logic address chang time gadget execut sens chameleon fundament mechan defend jit code reus attack conclus present principl instant obsolet address code map defeat punch code reus attack instanti principl novel techniqu call virtual address tabl remap implement system chameleon period random locat code fli achiev develop set techniqu includ iter instrumen tation techniqu instrument protect binari program generat random suitabl binari runtim virtual shuffl function reorder instruct rearrang optim experi binari program punch code reus attack defeat system random interv set short experi chameleon introduc averag perform overhead set refer abadi budiu erlingsson ligatti control flow integr acm confer enc comput communic secur ccs back holz kollenda kopp nürnberger pewni read prevent disclosur exploit execut code acm sigsac confer comput communic secur ccs back nürnberger oxymoron make fine grain memori random practic allow code share usenix secur symposium secur bhatkar duvarney sekar address obfusc effici approach combat broad rang memori error exploit usenix secur symposium secur bhatkar sekar duvarney effici techniqu comprehens protect memori error exploit proceed confer usenix secur symposium ssym bhatkar sekar duvarney effici techniqu comprehens protect memori error exploit usenix secur symposium secur bittau belay mashtizadeh mazier boneh hack blind ieee symposium secur privaci oakland bletsch jiang freeh mitig code reus attack control flow lock annual comput secur applic confer acsac bletsch jiang freeh liang jump orient program class code reus attack acm symposium comput communic secur asiacc bosman bos frame signalsu return portabl shellcod ieee symposium secur privaci oakland carlini wagner rop danger break modern defens usenix secur symposium secur checkoway davi dmitrienko sadeghi shacham winandi return orient program return acm confer comput communic secur ccs chen mao wang zhou zeldovich kaashoek linux kernel vulner state art defens open problem proceed second asia pacif workshop system acm chen xiao shen yin mao xie drop detect return orient program malici code intern confer system secur iciss cheng zhou ding deng ropeck generic practic approach defend rop attack proceed annual network distribut system secur symposium ndss coreutil coreutil gnu core util http gnu coreutil cve adob reader allow remot attack execut arbitrari code denial ser vice memori corrupt https cgi bin cve davi dmitrienko egel fischer holz hund nürnberger sadeghi mocfi framework mitig control flow attack smartphon network distribut system secur symposium ndss davi liebchen sadeghi snow monros isomeron code random resili time return orient program network distribut system secur symposium ndss davi sadeghi lehmann monros stitch gadget ineffect coars grain control flow integr protect usenix secur symposium secur davi sadeghi winandi ropdefend detect tool defend return orient program attack acm symposium comput communic secur asiacc design return libc attack bugtraq göktas athanasopoulo bos portokalidi control overcom control flow integr ieee symposium secur privaci oakland hiser nguyen tuong hall davidson ilr gadget ieee symposium secur privaci oakland hollingsworth miller cargill dynam program instrument scalabl perform tool scalabl high perform comput confer shpcc joli advanc exploit internet explor window overflow http blog advanced_exploitation_of_ php kil jim bookholt ning address space layout permut aslp fine grain random commod softwar annual comput secur applic confer acsac knuth art comput program volum seminumer algorithm addison wesley profession wang jiang grace bahram defeat return orient rootkit return kernel european confer comput system eurosi microsoft detail descript data execut prevent dep featur window servic pack http molnar exec shield http mingo exec shield nergal advanc return lib exploit phrack magazin onarlioglu bilg lanzi balzarotti kirda free defeat return orient program gadget binari annual comput secur applic confer acsac pappa polychronaki keromyti smash gadget hinder return orient program place code random ieee symposium secur privaci oakland pappa polychronaki keromyti transpar rop exploit mitig indirect branch trace proceed usenix secur symposium secur roglia martignoni paleari bruschi surgic return random lib annual comput secur applic confer acsac schwartz avgerino brumley exploit harden easi usenix confer secur secur seibert okhravi söderström leak memori disclo side channel attack diversifi code acm sigsac confer comput communic secur ccs seibert okkhravi söderström leak memori disclosur remot side channel attack diversifi code acm sigsac confer comput communic secur ccs shacham geometri innoc flesh bone return libc function call acm confer comput communic secur ccs snow monros davi dmitrienko liebchen sadeghi time code reus effect fine grain address space layout random ieee symposium secur privaci oakland strackx younan philippaert piessen lachmund walter break memori secreci assumpt second european workshop system secur team pax address space layout random aslr http doc wang jiang hypersaf lightweight approach provid lifetim hypervisor control flow integr ieee symposium secur privaci oakland wartel mohan hamlen lin binari stir random instruct address legaci binari code acm confer comput communic secur ccs kalbarczyk iyer transpar runtim random secur interna tional symposium reliabl distribut system srds zhang wei chen duan szeker mccamant song zou practic control flow integr random binari execut ieee symposium secur privaci oakland zhang sekar control flow integr cot binari usenix confer secur secur 