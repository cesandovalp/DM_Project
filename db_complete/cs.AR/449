allow softwar develop debug hls hardwar jeffrey goeder steven wilton depart electr comput engin univers british columbia vancouv canada jgoeder stevew abstract high level synthesi hls emerg main stream design methodolog allow softwar design enjoy benefit hardwar implement work led effect compil produc high qualiti hardwar design softwar specif order fulli benefit promis hls complet ecosystem abil analyz debug optim design essenti ecosystem access softwar design challeng softwar develop view design differ physic implement chip individu sequenti line code implement consist gate oper parallel multipl clock cycl paper report effort creat ecosystem allow softwar design debug hls generat circuit familiar manner implement idea debug framework will includ releas popular legup high level synthesi tool introduct high level synthesi hls allow program written softwar languag automat synthes hardwar circuit hls gain popular fpga programm platform abl comput acceler alongsid tradit processor altera xilinx invest heavili technolog anticip hls base techniqu domin design entri method fpgas futur announc acquisit altera emphas shift fpgas glue logic root general purpos algorithm acceler platform shift will increas appetit fast turn design time increas access promis hls order hls deliv promis benefit compil complet ecosystem abil analyz debug optim design essenti ful ecosystem access softwar develop softwar develop system term sequen tial execut instruct limit explicit parallel contrast actual fpga implement consist interconnect dataflow compon oper parallel multipl clock cycl will discuss paper dispar creat chasm bridg will limit effect analysi debug optim will turn limit suitabl hls design real system debug optim ecosystem associ amount chip instrument bug hls system main int hls generat rtl hls fpga hls generat hardwar hardwar hardwar devic kernel level bug contain easi reproduc debug code workstat gdb rtl bug rtl verif incorrect hls tool rtl simul workstat system level bug bug interfac depend interact time hard reproduc requir long time debug fpga requir observ intern fpga fig classif bug hls system previous public focus optim instrument optim chip trace buffer maxim amount debug provid user minim overhead paper step focus user experi discuss sort debug support will debug hls generat circuit feasibl softwar develop describ debug tool encapsul idea focus function debug paper idea appli optim perform debug under challeng will describ appli equal perform function debug tool extend support perform debug hardwar debug figur bug classifi categori address debug flow kernel level bug error algorithm specif exampl error loop bound incorrect function algorithm error bug typic confin modul easi reproduc bug lead incorrect behaviour time circuit bug identifi port compil run origin code direct workstat map hardwar track kind bug design softwar debug tool gdb eclips familiar softwar design copyright held author owner internationalworkshop fpgas softwar programm fsp london unit kingdom septemb fig hardwar view debug trace difficult softwar design understand second class bug appear generat rtl code correct caus error hls tool error hls tool fpga vendor provid abil uncov bug simul approach rtl code simul workstat code correct level system verif essenti hls tool fulli matur design will appreci confid achiev success rtl simul despit extens kernel level rtl simul level test will design error escap hardwar implement three reason happen softwar emul will slower target hardwar typic time slower limit thorough test perform complex system imposs complet test enumer corner case second higher level test will uncov problem interact environ modul system expect bug occur larg system hls block interfac legaci block design rtl techniqu interfac mis understood softwar design lead subtl error difficult track third environ hls block exampl input data stream exact assum rtl simul inaccuraci model environ lead bug block connect real environ reason expect error will escap simul hardwar design find error debug system situ run fpga iii challeng softwar engin previous case type design error uncov run hardwar implement design debug hardwar level difficult softwar design primari challeng debug execut hardwar design visibl find root observ incorrect behaviour requir understand intern oper system system run port observ intern signal provid lot direct observ address commerci tool chipscop xilinx signaltap altera certus mentor graphic tool record select signal chip memori call trace buffer execut chip trace buffer interrog user understand oper design eventu uncov root incorrect behaviour challeng approach tool provid visibl mean context generat rtl hardwar softwar design typic understand under hardwar fact primari reason hls methodolog deliv high design product softwar design view design set function consist sequenti control flow code under hardwar consist dataflow compon oper parallel multipl clock cycl figur screenshot output tool exampl behaviour signal illustr waveform concept unfamiliar softwar design understand waveform diagram barrier map signal waveform variabl origin code hls tool typic reorder instruct extract fine grain parallel difficult softwar design recogn order event relat order instruct origin code factor difficult softwar design hardwar orient tool previous work knowledg debug tool produc hls circuit allow sourc level system debug tool present design work conjunct sea cumber hls tool debugg hls tool util obsolet jhdl framework longer support download debugg allow user step sourc code circuit run fpga execut cycl time support insert breakpoint inspect sourc code variabl debugg build idea work includ approach explain second debug tool produc inspect debugg design time work present time work author combin idea work singl tool will includ releas legup high level synthesi tool work present focus debug instrument hls circuit includ debugg tool debug framework hls scope describ address chal leng face softwar design debug hls circuit exposit concret present detail debug tool creat relat idea featur tool discuss will creat tool resembl softwar debugg debug hardwar design run fpga figur screenshot tool discuss will refer specif aspect diagram debugg gui debug databas debug manag success nono choos breakpoint locat circuit root bug replay window bug activ fpga backend backend api modelsim backend backend api replay backend backend api execut trace live replay mode replay window slider activ instruct breakpoint instruct schedul under llvm instruct fig framework hardwar debugg softwar engin understand debug ecosystem easili access softwar design debug tool resembl debug tool design understand gdb eclips user design term line code state system level variabl figur achiev tool sourc level code user left panel level local global variabl panel left panel current execut line sourc code highlight parallel natur circuit multipl instruct execut simultan occur highlight multipl line figur techniqu gantt chart figur tool present gantt chart execut code time pro vide waveform diagram softwar friend diagram mechan design understand fine grain parallel uncov hls tool exampl figur assign beg initi oper loop start cycl graphic gantt chart instruct control step hardwar correspond futur version tool investig integr techniqu eclips provid separ tool clock cycl clock cycl abstract control step tool long oper divid instruct oper array typic control step exampl figur box gantt chart repres individu instruct under intermedi represent explain note presenc compil optim gantt chart straightforward fig ure discuss impact compil optim debug mode softwar design expect set breakpoint singl step design accustom full visibl variabl point program describ find type bug requir run circuit speed system provid frastructur trace buffer associ logic provid full visibl signal hardwar design run speed requir overhead practic address implement debug mode live mode user full visibl circuit speed replay mode user circuit speed full visibl portion execut describ live mode live mode system oper softwar debugg user creat breakpoint limit number hardwar breakpoint unit includ debugg gui debug databas debug manag modelsim backend fpga backend replay backend execut trace success nono choos breakpoint locat circuit root bug replay window bug activ fig multipl debug iter expand replay window instrument singl step code hit breakpoint complet singl step tool disabl control finit state machin fsm essenti paus system paus user retriev variabl store chip memori pane figur replay mode debug live mode involv start stop circuit debug techniqu conduc run circuit speed replay mode abil circuit speed preserv softwar debug experi replay mode featur framework best illustr softwar hardwar world bridg mode oper live mode user set breakpoint circuit breakpoint circuit run instrument circuit record chang signal well control flow execut program valu store chip trace buffer memori program hit breakpoint valu trace buffer read debug tool user enter replay mode replay mode user singl step set breakpoint variabl valu control flow trace buffer data live valu chip user observ chip speed maintain softwar debug interfac addit singl step user slider move ahead buffer top figur interest slider step backward time provid illus run chip backward anticip featur will user work backward determin root unexpect behaviour fact techniqu work backward softwar domain exampl includ revers debug microsoft visual intellitrac note live mode requir chip trace buffer associ logic circuit chip resourc limit store data limit number instruct refer length code data store replay window replay window provid complet control flow trace allow user observ instruct activ execut step variabl updat replay window inspect point updat unknown prior updat replay window handl case variabl updat replay window includ instrument provid debugg access memori control circuit allow read variabl direct memori replay mode user step forward backward instruct replay window step user wish replay window multipl debug iter requir figur previous public effici buffer structur well method effect compress control flow data store buffer paper record averag control data line code chip memori trace buffer reduc record select signal reconstruct method investig refer reader detail debug instrument includ data execut trace length area overhead impact oper frequenc instruct level parallel note differ singl step framework singl step softwar debugg singl step softwar debugg will typic advanc sourc code statement singl step framework advanc multipl instruct time instruct map hardwar execut clock cycl exampl figur system advanc instruct red vertic assign piv check will perform hardwar map clock cycl decoupl oper singl step address type situat creat tool modifi user circuit tempor separ oper provid select gate oper result chang user circuit mean circuit debug origin circuit author explor approach pro vide virtual serial make appear user statement execut serial realiti execut parallel hardwar debugg behav tradit softwar debugg hide parallel user prevent restructur code explor fine grain parallel optim instruct figur hls compil compil softwar hardwar stage transform loop restructur perform code amen acceler code convert intermedi represent resembl assembl languag instruct typi calli associ oper optim hardwar debug hls tool debug hls circuit softwar design expertis hardwar design forc higher level abstract hard hls perform transform optim rtl circuit resembl origin sourc code quicksort line code line verilog challeng experienc hardwar design transform compil optim hdl fig compil flow typic hls tool illustr intermedi represent fig gantt chart show loop unrol optim fig gantt chart show code reorder optim perform hardwar construct direct represent ideal softwar design shelter exist develop softwar under assembl languag compil softwar anticip reason hls design inspect understand instruct multipl control step understand primit oper occur debug multi thread applic second perform optim derstand instruct longer execut restructur code lead fine grain parallel optim third hls tool vendor help optim debug compil reason elect expos user figur bottom panel screen execut instruct compil optim hls tool provid abil select level optim appli code hardwar generat hls tool built llvm framework user familiar flag higher level optim restructur code perform hardwar built debug optim code generat flag notori difficult design softwar common practic debug unoptim strategi work well hls generat circuit reason chang level optim will chang time circuit bug anticip interfac block chang time result behaviour version circuit ship debug version circuit direct second case compil lead larger circuit fit target fpga make chip debug imposs softwar long program fit virtual memori debug reason design tool debug optim circuit implic optim circuit variabl store regist datapath local memori requir chang instrument discuss impact user experi variabl optim second tempor relationship instruct vari great result singl step intuit instruct origin program execut order simultan provid user level visibl abstract sequenc program order understand actual order execut instruct debug block level interfac time problem figur provid exampl gantt chart aid user debug optim code figur sort oper call time loop optim compil complet unrol loop replac code subsequ call function figur compil perform code reorder optim case instruct block independ content block execut case gantt chart help user understand optim extend framework debug tool design legup tool design modular fashion extend support hls tool expand explor techniqu debug hls circuit figur diagram softwar organ tool heart tool debug manag coordin debug session track current state design api control observ design generat signal event occur circuit state circuit chang breakpoint encount debug manag backend api allow multipl backend system support execut devic exampl initi support live mode interact fpga replay mode valu trace buffer describ paper backend api easili add third execut mode simul base execut modelsim backend api abstract detail devic debugg tool abstract test debugg gui debug databas debug manag success nono choos breakpoint locat circuit root bug replay window bug activ fpga backend backend api modelsim backend backend api replay backend backend api execut trace live replay mode replay window slider activ instruct breakpoint instruct schedul under llvm instruct fig organ hls scope debugg tool techniqu debug instrument circuit hls tool need modifi part debugg tool debugg gui written python visual overlay top debug manag issu request debug manag singl step obtain current state circuit read variabl valu gui replac tool command interfac binari librari eclips plug need modifi rest system final piec system essenti debug databas mysql databas detail design adapt automat popul hls synthesi process track entiti sourc code function line code instruct variabl data type entiti produc circuit modul fsm state signal memori relationship port debugg hls tool modifi hls flow popul databas current debugg softwar connect fpga uart instrument hardwar debugg tool uart logic modular allow replac communic method limit current tool limit singl thread softwar handl fine grain instruct level parallel support coars grain thread level parallel emerg latest hls tool plan address futur work vii conclus high level synthesi emerg mainstream design methodolog allow softwar design target hardwar implement hls design process softwar design abil debug hardwar system debug tool method familiar paper present hls scope sourc level debug ger legup hls tool tool target softwar design familiar debug interfac allow singl step sourc code place break point inspect variabl includ addit featur gantt chart hls schedul under instruct help bridg gap sequenti softwar optim parallel circuit debug tool open sourc modular extens applic releas legup refer cong liu neuendorff noguera visser zhang high level synthesi fpgas prototyp deploy ieee transact comput aid design integr circuit system april meeus van beeck goedem meel stroobandt overview today high level synthesi tool design autom embed system goeder wilton effect fpga debug high level synthesi generat circuit intern confer field programm logic applic sep dynam signal trace debug compil optim hls circuit fpgas intern symposium field programm custom comput machin wakabayashi cyberworkbench integr design environ base base behavior synthesi verif intern symposium vlsi design autom test april tsoi lee leong massiv parallel key search engin symposium field programm custom comput machin apr beeckler gross fpga particl graphic hardwar symposium field programm custom comput machin apr whitton chen fpga solut radiat dose calcul symposium field programm custom comput machin apr lee shannon yedlin margrav multi fpga applic specif architectur acceler float point fourier integr oper intern confer applic specif system jul xilinx chipscop pro softwar core user guid apr altera quartus handbook version volum verif design debug signaltap logic analyz nov mentor graphic certus asic prototyp debug solut http product certus access hemmert tripp hutch jackson sourc level debugg sea cucumb synthes compil symposium field programm custom comput machin april tripp jackson hutch sea cucumb synthes compil fpgas intern confer field programm logic applic calagar brown anderson sourc level debug fpga high level synthesi intern confer field programm logic applic sep cani choi aldham zhang kammoona czajkowski brown anderson legup open sourc high level synthesi tool fpga base processor acceler system acm transact reconfigur technolog system monson hutch approach system debug behavior synthes fpga circuit intern confer field programm logic applic sep monson hutch sourc level transfor mation improv high level synthesi debug valid fpgas intern symposium field programm gate array acm 