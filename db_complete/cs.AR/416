modular acquisit stimul system timestamp driven neurosci experi paulo matia rafael guariento lirio almeida jan slaet carlo institut physic univers paulo carlo brazil matia guariento lirio jan abstract dedic system fundament neurosci experi mental protocol requir time determin synchron stim uli generat develop data acquisit stimuli generat system neurosci optim record timestamp spike neuron entir high level hard ware descript languag hdl despit logic complex penalti synthes languag implement design low cost small reconfigur devic modular frame work explor memori arbitr scheme system evalu logic element usag resili activ burst design decoupl latenc insensit approach allow easier code reus adopt central scheme construct plicat usag high level hdl allow straightforward stepwis code modif transform architectur achiev modular rapid prototyp novel electron instrument system tailor scientif keyword spike neuron data acquisit precis time sourc arbitr latenc insensit modular design introduct neuron behav emit stereotyp puls electr depolariza tion membran creat tempor local spike mon belief spike neuron follow principl process digit signal encod spike tim ing individu cell produc waveform widespread experiment approach employ analog digit convert adc integr commerci acquisit system captur complet waveform procedur requir research desir analyz larg popul neuron record electrod appli neuron classif techniqu spike sort discrimin preprint submit arc final public individu waveform lack spe cializ acquisit hardwar work adopt record techniqu identifi occurr spike neuron electrod data file larg spike detect softwar demand consider amount time paper design low cost altern hardwar solu tion base dedic complex programm logic devic cpld chosen cplds field programm gate array fpgas demonstr flexibl approach cplds limit small number logic gate lack common fpga featur block ram phase lock loop plls implement logic circuit cpld adopt modular design aim facilit futur refin custom specif applic complet sourc code impl ment bluespec systemverilog bsv languag bsv design target small reconfigur devic rare literatur work bsv produc higher logic ement count regist transfer level rtl languag argu microarchitectur choic greater pact usag abstract level lack studi glue logic size architectur modular complex paper showcas system explor pact latenc insensit modul decoupl compar distinct implement resourc arbitr scheme work evalu syn thesi exist test consequ system resili extrem condit time applic requir acquisit input provid digit logic analog front system generat asynchron ttl compat signal puls currenc valid spike entir circuit design compat easili insert previous experiment setup devis studi neu ral codif chrysomya visual system generic suitabl wide rang neurosci experi main contribut work develop portabl low cost precis data acquisit system neuro scienc neuroetholog experi appli seldom concept record digit event adc convert data increas precis neural spike time employ bsv languag small resourc constrain system showcas architectur refactor decoupl central scheme paper organ describ basic specif design architectur discuss system implementa tion focus point common dynam static arbit version section delv specif aspect implementa tion present synthesi experiment simul final conclud system architectur system offer ttl level puls timestamp acquisit input analog bit resolut output stimuli generat join test action group jtag host comput interfac compos max micro kit epm cpld buffer input overvoltag protect digit analog convert dac bit sram divid project function subunit synchron receiv asynchron input puls regist bit time tamp hardwar counter pair flag indic input channel fire count neural system believ resolut studi fine detail code fifo sram interfac extern sram memori pair fifo queue kib buffer data acquir input buffer stimuli receiv comput fifo modul compat bsv standard librari jtag interfac communic host comput wrap altera jtag uart librari readi bsv modul ing protocol communic modul portabl cpld fpga manufactur vendor programm devic config ure jtag bus usb adapt embed evalu board approach introduc protocol overhead encapsul uart emul insid jtag usb limit ing data rate mbit client softwar explicit poll devic interfac interrupt event driven softwar determin bottleneck depend hardwar buffer size desir data rate limit impair applic bsv modul architectur bluespec systemverilog type high level hardwar descript lan guag hdl function paradigm featur bsv design organ modul rule modul provid interfac compos set method access modifi intern state state chang side effect clear separ read oper monad call action express modifi state action type modul static elabor time allow repres plex circuit structur rule entiti describ connect modul ultim defin hardwar dynam form set action boolean predic defin explicit condit need allow execut action rule fire singl clock cycl rule guarante entir complet execut fire properti transact atom rule fire implicit condit attribut bsv express bsv compil propag implicit condit predic rule execut action queri correspond express implicit condi tion attribut method boundari serv effect modul contract synthes compil defin execut order rule allow hardwar schedul generat term rewrit system trs formal synchron ser fifo sram des jtag dac wire mkasyncpulsesync input acqin insync bit numinput syncedin blendchannelflag channelflag timestampupd bit timestamp mkfunnel funnel uart sram mksramsplit srvb srva mkalterajtaguart uarthandlecmd mkunfunnel inout unfunnel mkdac req dac dachandlereq uartoutfifo uartinfifo cli mksramfifo cli wire wire dacload load wire mkasyncpulsesync dac sram fig block diagram bsv modul rule gray shade area repres intern logic white structur depict interfac modul portray quadrilater name insid modul name instanc name small rectangl side interfac ellips design rule perform connect repres direct arrow figur illustr main modul fundament differ arbitr approach resid sramfifo intern communic sram occur dynam approach client server interfac mediat fifo static extra central modul exist assign specif oper sramfifo cycl acquisit data flow asynchron puls arriv acquisit put synchron system clock asyncpulsesync modul syncedin signal blendchannelflag rule accumul bit input channel channelflag regist puls occur syncedin collect timestamp timestampupd rule atomi calli increment timestamp regist send channelflag current timestamp funnel reset channelflag funnel emit byte input cycl uartoutfifo final data come dataoutfifo read host comput collect jtag uart transmit interfac stimulus generat data flow jtag uart receiv interfac uarthandlecmd rule identifi byte receiv comput repres start command dac convers request start command set boolean regist figur unblock predic dacload timestampupd blendchannelflag rule dac convers request send current byte byte uartinfifo come fifo byte feed unfunnel block merg three byte dachandlereq control request flow dac modul dacload rule fire input channel receiv puls unblock dachandlereq rule caus synchron updat dac output input channel synchron analog output desir stimuli clock display control visual stimul system bsv implicit condit mechan eas specif provabl correct system need add error handl place design path fifo overflow timestampupd rule ensur timestamp increment updat period second check accomplish dacload rule verifi fifo underrun occur path certifi dac readi receiv command dac regist fill load final direct system function correct good debug practic third check byte ceiv jtag uart correspond valid command verifi dac request valid leav uartinfifo aim detect currenc data corrupt communic sram chip error condit occur alert user blink led system reset describ characterist common system modul ser des serial deseri modul implement shift regist design generic type parametr make reusabl input output data type code excerpt illustr concept figur dac order rapid prototyp control serial peripher terfac spi dac linear calibr procedur employ stan dard bsv librari call stmtfsm consist domain specif languag dsl finit state machin fsms fsms ili compos expos form simpl extern modul interfac dac regist updat request support dac three byte target channel byte data fsm implement illustr figur sramfifo modul type parametr expos fifo subinterfac mimick bsv standard mklfifo cli subint face connect sram sramsplit server interfac usag ephemer histori regist ehr great simplifi design interfac generic type interfac funnel type type endinterfac function funnel tofunnel fifof fifof return interfac funnel method bool notful endinterfac endfunct modul mkfunnel funnel rule stage shift input shiftreg truncatelsb inval unpack truncatelsb inval updatestag endrul rule stage unpack truncatelsb shiftreg shiftreg shiftreg updatestag endrul return interfac return tofunnel endmodul fig code excerpt serial shift regist implement illustr parametr data type abstract manipul interfac compil time solv function tofunnel stmt shiftregsenderstmt seq shiftregdon seq send bit shiftreg dac endseq rncs delay endseq instanti state machin instruct fsm shiftregsend mkfsm shiftregsenderstmt function action send bit cmd action shiftreg cmd rncs endact endfunct calibr dac stmt daccalibrationstmt seq delay waitvoltagestab send delay daccalibcycl send endseq interfac req method action dacreq rdi match mask sampl send command write sampl send mask sampl endmethod endinterfac fig code illustr usag finit state machin fsm domain specif languag dsl fsms seri statement stmt dsl resembl imper softwar languag mkfsm modul transform statement hardwar implement implement send function compos fsms start fsm extern access method der achiev schedul specif mklfifo ehr provid regist interfac cycl access order logic execut order rule method head tail posit pointer locat insid sram held ehr sramfifo store unit data case design byte local cach fifo implement flip flop regist output connect direct cach fifo empti dispatch read request sram aim maintain cach fill time data enqueu sramfifo space cach fifo write request sram dynam arbit design sram control figur decoupl sramsplit modul figur dispatch request order receiv reqfifo intern cycl regist track state singl request arbitr access modul singl sram control request receiv modul pair fifo set mutual exclus rule control prioriti request generat getprioritizevalid function fire singl request fifo empti fifo data priorit current turn rule fire priorit lru fifo turn regist hold state need infer lru fifo respons request ifc enq mklfifof deq enqmklfifof bit cycl cycle_machin zbuf mktristat nwe addrifc data sram_addr sram_nw sram_data mksram deq fig dynam arbit base design sram control decoupl sramsplit modul state cycl oper determin intern cycl regist handl cycl machin rule fifo wire rule control tri state buffer drive output arbitr place sramfifo modul meth enqueu dequeu data design conflict order simplifi modul reus method call cycl check head tail pointer equal dequeu method request read address srvb request responserespons request srv mksram sram respons request ifc deq enqmklfifof pend prioritize_current_turn getprioritizevalid getputput getmklfifof bit turn wire wiresmksramsplit fig sramsplit sram server interfac arbitr access singl sram control request come server held fifo control set three mutual exclus rule arbitr access base empti fifo flag turn regist pend fifo preserv request identif allow respons serv order interfac client cli interfac request method actionvalu sramreq bit addr_sz tdata obey schedul request order memop turn read write enum case match read action turn read endact readthenwrit action turn turn_stag read write turn_stag turn_stag turn_stag endact write writethenread implement endcas last_op turn forward request sramsplit turn read return tag read write request endinterfac interfac respons endinterfac endinterfac rule compute_req_turn deq_requested_mem enq_requested_mem deq_requested_mem enq_requested_mem head tail deq read head enq written tail enforc memori order compat method order deq enq impli read write readthenwrit last_op read writethenread readthenwrit lru deq_requested_mem enq_requested_mem read deq_requested_mem enq_requested_mem write endrul fig excerpt dynam arbitr sramfifo implement modul follow client server pattern demand treatment simultan quest full decoupl comput req turn rule panel choos turn request issu current cycl lru scheme adopt highlight code method client interfac left panel queri req turn fifo updat forward correct request return exampl ephemer histori regist ehr refer append subscript text code defin logic execut order regist read write oper enqueu method ask write case enforc request sram order logic execut order chosen design method dequeu enqueu read write follow lru approach base regist hold type memori oper issu sramfifo modul figur static arbit start code dynam version increment condit method predic test system chang implicit condit control data flow fifo logic develop stage design error tend prevent rule fire stop data flow make system hang produc incorrect req req req req resp resp resp resp enq deq deq enq fig time diagram sramfifo transact govern static biter arrow identifi cycl memori request respons cur white rectangl repres action uartinfifo black rectangl depict oper uartoutfifo predic condit base manual devis arbitr schedul figur schedul allow execut enqueu dequeu oper uartinfifo uartoutfifo cours clock cycl central arbit consist counter reset cycl implement top level modul boolean valu deriv counter signal oper occur cycl rout top level modul inner sram control sramsplit sramfifo figur predic chang fifo remov reduc number les need implement design sram control cycl regist compar figur move replac bit central arbit counter memori request allow bit cycl number figur sramsplit request arbitr server allow correct cycl defin time diagram request come uartinfifo cycl number uartoutfifo cycl reqfifo remov design behavior order respons infer diagram cycl allow remov pend fifo chang modul abstract synthes pure wire compar figur limit rule action occur cycl insert predic condit modul mksram bit turn sram taddr tdata rule cycle_machin turn notic cycl depend predic endrul interfac server ifc interfac request method action sramreq taddr tdata req turn method implicit condit endmethod endinterfac endinterfac endmodul attribut implicit condit action depend correct cycl modul mksramfifo bool turnread bool turnwrit sramfifo addr_sz tdata method action enq tdata not_ring_ful turnwrit action add implicit condit action express endact endmethod endmodul central arbit cyclic counter interfac centralarbit numer type arbitrated_unit interfac readon bit tlog arbitrated_unit turn endinterfac modul mkcentralarbit centralarbit reg bit tlog turncount mkregu rule incrementturn maxcount frominteg valueof turncount turncount maxcount turncount endrul interfac readon turn regtoreadon turncount endmodul top modul pass arbit turn argument modul centralarbit arb mkcentralarbit sramsplit addrsiz byte sram mksramsplit sramfifo fifoaddrs byte uartinfifo mksramfifo sramfifo fifoaddrs byte uartoutfifo mksramfifo fig excerpt static arbit implement centralarbit modul consist simpl cyclic counter instanti insid top level modul turn method describ current cycl schedul figur bit cycl counter boolean condit involv current state rout inner modul append predic implicit condit sramfifo dequeu enqueu allow des ignat cycl dequeu enqueu allow remov memori request output fifo replac wire synthesi synthesi tabl devic adopt project dynam arbitr circuit occupi les static arbit design correspond les cpld half hardwar resourc free exploit implement featur synthes architectur smaller devic order demonstr design meet requir reach limit cpld substrat quartus fitter clear undertook effort synthesi devic circuit implement occupi les bigger cpld attain clock frequenc reduc area optim remain mhz experiment valid workbench valid consist connect independ squar wave period signal generat input system hour analyz tabl synthesi arbit design altera quartus design logic maximum clock logic maximum clock arbit element frequenc element frequenc static mhz mhz dynam mhz mhz fig histogram display number occurr time interv measur consecut puls input channel connect independ period signal sourc miss spurious event observ hour acquisit acquir data spurious miss detect figur histogram time interv consecut record puls input channel histogram correspond period puls generat channel hewlett packard channel soni tektronix function generat three remain channel fed signal generat free run astabl oscil timer integr circuit input channel program synchron dac convers fed frame rate frequenc adopt vsimg visual stimul system second third channel suppli close incommensur frequenc khz khz remain channel fed frequenc produc three ident circuit differ compon nomin toler experi architectur dynam static arbit ident histogram figur portray dynam arbit histogram hour acquisit puls miss spurious event regist abscissa graph reach doubl half baselin period maximum deviat adjust period accept thermal drift expect oscil sta ble produc jitter commerci function generat sparser histogram emphas input event period employ test well minimum interv spike refractori period attain typic neuron exampl chrysomya neuron minimum interv arbit resili evalu dynam arbit design advantag code reusabl herent latenc insensit decoupl characterist resili failur order prove need increas timestamp resolut origin specif fact updat rate low clock frequenc mhz correct schedul leav room round memori oper cles figur suffici carri byte channelflag timestamp tupl fifo observ failur differ sram arbitr scheme increas timestamp counter updat rate clock frequenc order control paramet uart transmiss rate simul system evalu workbench instrument architectur simul exact paramet input input fed train puls generat poisson process stochast model occasion produc activ burst possess parameter rate adopt statist model spike neuron channel model oscil frequenc vari narrow gaussian distribut better reproduc behavior stimuli refer clock limit uart transmiss byte cycl aim observ system regim eventu acquir data transmit uart recept constrain byte cycl allow byte chunk stimuli data provid system doubl speed requir channel refer clock frequenc chosen system clock vari rate paramet poisson process measur total input event rate system expos number input event divid number cycl simul relat time failur mtbf number cycl failur detect input event rate divid clock frequenc tim ilu regim transit dynam arbit static arbit fig time failur mtbf simul design configur increas timestamp resolut system clock subject larg input event rate dynam arbit consist resili present oper regim regim failur caus overflow uartoutfifo regim memori write request occur high rate eventu schedul time overflow funnel static arbit schedul enqueu oper fix rate byte cycl slower simul uart transmiss rate regim funnel overflow error condit discuss trigger experi happen overflow path figur demonstr support fire rate greater static arbit miss event namic arbit take longer fail frequenc approach limit input rate maximum meaning frequenc adopt time stamp resolut dynam arbit fail circa cycl static arbit withstand cycl simul paramet static arbit fill uart sram contain ring byte fifo enqueu rate limit maximum byte cycl central arbit schedul figur simul uart reach transmiss rate byte cycl suffici fifo empti observ failur overflow funnel uartoutfifo close full state failur process view stationari time scale greater cycl measur data set figur chang reset circuit state coupl time cours simul hand dynam arbit surpass oper regim figur failur occur funnel overflow reach regim lower frequenc figur system abort uartoutfifo full dash curv proport flim input frequenc abscissa flim limit frequenc experi flim effect uart transmiss rate impli circuit expect fail flim conclus system describ paper sourc code appli neuro scienc vivo vitro experi requir determinist time synchron stimuli generat studi neural code visual system fli appli experi neuroethol ogi exampl analysi electrocommun signal produc puls type electr fish employ digit puls timestamp techniqu allow achiev measur precis order higher adc base acquisit system project program small reconfigur devic half les left free fill implement futur experi real time feedback bluespec systemverilog bsv effect project involv small devic present approach refactor decoupl latenc insensit logic static arbitr design lower usag keep dynam arbitr compens cost system resili activ burst design code modular reusabl implement system work prototyp close loop experi implement fpga occupi les devic interfac real time oper system rtos pci express acknowledg author support grant cape fapesp maxim integr provid free analog sampl altera corp bluespec suppli free softwar licens univers program refer dayan abbott theoret neurosci comput mathemat ical model neural system mit press lewicki review method spike sort detect classifica tion neural action potenti network comp neural brochini carelli pinto singl synaps code intraburst spike pattern central pattern generat motor neuron neurosci spavieri eichner borst code effici fli motion process set fire rate fire precis plos comput juli bolzon nordstro local larg rang inhibit featur detect neurosci rokem watzl gollisch stemmler herz samengo spike time precis under code effici auditori receptor neuron neurophysiol nikhil bluespec system verilog effici correct rtl high level specifi cation memocod june matia low cost modular acquisit stimul system neurosci http zenodo juli gruian westmijz bluejamm bluespec embed java architectur memori manag synasc septemb meeus van beeck goedem meel stroobandt overview high level synthesi tool des autom emb syst malik palazzari hemani effort resourc abstract perfor manc high level synthesi find answer question sigarch comput archit news march arvind nikhil rosenband dave high level synthesi essenti ingredi design complex asic iccad washington usa ieee comput societi fleme gross arvind wili architectur model wireless system ispass april murray betz quantifi cost benefit latenc insensit communic fpgas fpga york acm almeida slaet berl vsimg high frame rate bitmap base display system neurosci neurocomput nemenman lewen bialek ruyter van steveninck neural code natur stimuli millisecond resolut plos comput march wadler monad function program jeur meijer advanc function program volum lectur note comput scienc springer berlin heidelberg shen arvind design verif specul processor proceed workshop formal techniqu hardwar hardwar system rosenband ephemer histori regist flexibl schedul rule base design memocod june baptista almeida slaet berl grebogi complex biolog system visual modul philo soc fernand pinto almeida slaet berl record ing neuron second order stimulus reconstruct spike train popul code neural comput octob forlim pinto automat realist real time stimul record weak electr fish long time behavior character freeli swim fish stimuli discrimin plos januari matia slaet pinto individu discrimin freeli swim ming puls type electr fish electrod array record neurocomput forlim almeida varona rodr pinto studi electr motor behavior weak electr fish gymnotus carapo gnathonemus petersii theori tool neurosci orlean societi neurosci program guariento mosqueiro caputi pinto simpl model eletrocommun refractori avoid respons bmc neurosci suppl mun rodr varona rtbiomanag softwar platform expand applic real time technolog neurosci bmc neurosci almeida matia guariento embed system real time feedback neurosci experi brazilian symposium comput ing system engin sbesc intel embed system competit novemb arxiv 